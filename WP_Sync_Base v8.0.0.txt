{"slots":{"0":{"name":"screen","type":{"events":[],"methods":[]}},"1":{"name":"receiver","type":{"events":[],"methods":[]}},"2":{"name":"databank","type":{"events":[],"methods":[]}},"3":{"name":"emitter","type":{"events":[],"methods":[]}},"4":{"name":"debug_receiver","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--screen.onMouseUp(*,*)\n local InputFromScreen=screen.getScriptOutput()\n\n if (InputFromScreen~=nil and InputFromScreen~=\"\") then\n  InputFromScreen=json.decode(InputFromScreen)\n  local Item=InputFromScreen[1]\n  local Action=InputFromScreen[2]\n  if Action==\"Send Data To\" then\n   SendingDataTo=Item\n   timer_id=\"SendDataTo\"\n   timer_delay=2\n  elseif Action==\"Clear WP\" then ClearWP(Item)\n  elseif Action==\"Add Ship\" then AddShip(Item)\n  elseif Action==\"Remove Ship\" then RemoveShip(Item)\n  end\n end\n--","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"onMouseUp(x,y)","slotKey":"0"},"key":"0"},{"code":"--receiver.onReceived(*,*)\n local SendDataToBase=string.find(message, \"<SendDataToBase>\")\n local ReceivedShipID=string.find(message, \"<SendShipID>\")\n if Temp_ShipID==nil then Temp_ShipID=\"\" end\n local ReceivedConstructID=string.find(message, \"<\"..Temp_ShipID..\">\")\n local ShipRqst=string.find(message, \"<ShipRqst>\")\n local ShipData=string.find(message, \"<ShipData>\")\n\n if SendDataToBase then\n  ship_id_rqst=string.gsub(message, \"<SendDataToBase>\", \"\")\n  local FleetKey=databank.getStringValue(\"Fleet\")\n  FleetKey=json.decode(FleetKey)\n  local ShipRegistered=false\n  for i=1, #FleetKey do\n   if FleetKey[i].n==ship_id_rqst then ShipRegistered=true break end\n  end\n  if ShipRegistered then\n   timer_id=\"<SendDataToBase>\"\n   timer_delay=2\n  end\n end\n\n if ReceivedShipID then\n  ship_id_rqst=string.gsub(message, \"<SendShipID>\", \"\")\n  local FleetKey=databank.getStringValue(\"Fleet\")\n  FleetKey=json.decode(FleetKey)\n  if FleetKey==nil then FleetKey={} end\n  local ShipRegistered=false\n  for i=1, #FleetKey do\n   if FleetKey[i].n==ship_id_rqst then ShipRegistered=true break end\n  end\n  if ShipRegistered then\n   local check=string.match(ship_id_rqst, \"*\")\n   if check then\n    ship_id_rqst=string.gsub(ship_id_rqst, \"*\", \"\")\n    timer_id=\"<BaseShipId>\"\n    timer_delay=2\n   else\n    Temp_ShipID=ship_id_rqst\n    timer_id=\"<ConstructIDRqst>\"\n    timer_delay=2\n   end\n  end\n end\n\n if ReceivedConstructID then\n  local ConstructID=string.gsub(message, \"<\"..Temp_ShipID..\">\", \"\")\n  AddShipID(Temp_ShipID, ConstructID)\n  Temp_ShipID=\"\"\n  timer_id=\"<BaseShipId>\"\n  timer_delay=2\n end\n\n if ShipRqst then \n  timer_id=\"init_sending\"\n  timer_delay=2\n end\n\n if ShipData then\n  if msg_counter==nil then msg_counter=0 end\n  msg_counter=msg_counter+1\n  system.print(\"Base is Receiving WP:\"..msg_counter)\n  msg_received=true\n  rcv_msg=message:gsub(\"@@@\",\"\\\"\")\n  rcv_msg=string.gsub(rcv_msg, \"<ShipData>\", \"\")\n  rcv_msg=json.decode(rcv_msg)\n  AddWP()\n end\n--","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"onReceived(channel,message)","slotKey":"1"},"key":"1"},{"code":"print(channel .. ' : ' .. message)\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"onReceived(channel,message)","slotKey":"4"},"key":"2"},{"code":"--unit.onStart()\n local SoftwareVersion=\"v8.0.0\"\n system.print(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\")\n system.print(\"WP Base Sync\")\n system.print(\"Release \"..SoftwareVersion)\n system.print(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\")\n local CLEAR_DB=false --export\n if CLEAR_DB then databank.clear() end\n --SETUP\n  local FontName=\"Montserrat-Light\"--export\n  FontName=[[\"]].. FontName ..[[\"]]\n  local FontSize=20--export\n\n  local Font_R=217--export\n  Font_R=ColorConvert(Font_R)\n  local Font_G=217--export\n  Font_G=ColorConvert(Font_G)\n  local Font_B=217--export\n  Font_B=ColorConvert(Font_B)\n\n  local Button_R=0--export\n  Button_R=ColorConvert(Button_R)\n  local Button_G=0--export\n  Button_G=ColorConvert(Button_G)\n  local Button_B=255--export\n  Button_B=ColorConvert(Button_B)\n\n  local Table_R=0--export\n  Table_R=ColorConvert(Table_R)\n  local Table_G=0--export\n  Table_G=ColorConvert(Table_G)\n  local Table_B=255--export\n  Table_B=ColorConvert(Table_B)\n\n  local Title_R=255--export\n  Title_R=ColorConvert(Title_R)\n  local Title_G=255--export\n  Title_G=ColorConvert(Title_G)\n  local Title_B=0--export\n  Title_B=ColorConvert(Title_B)\n\n  local Button_Pressed_R=255--export\n  Button_Pressed_R=ColorConvert(Button_Pressed_R)\n  local Button_Pressed_G=0--export\n  Button_Pressed_G=ColorConvert(Button_Pressed_G)\n  local Button_Pressed_B=0--export\n  Button_Pressed_B=ColorConvert(Button_Pressed_B)\n\n  local SelectColorR=ColorConvert(0)\n  local SelectColorG=ColorConvert(255)\n  local SelectColorB=ColorConvert(255)\n\n  local ButtonEdgeR=ColorConvert(192)\n  local ButtonEdgeG=ColorConvert(192)\n  local ButtonEdgeB=ColorConvert(192)\n\n  local function Setup()\n   screen.activate()\n   ScrW=1024\n   ScrH=576\n   Cell=32\n   AddingShip=\"\"\n   if receiver then receiver.setChannelList({\"AviatorHUD\"}) end\n  end\n  Setup()\n\n --DATA\n  --INIT SENDING\n   timer_delay=0\n   unit.setTimer(\"Delay_Emitter\", 0.5)\n   function init_sending()\n    wp_synced=0\n    index_sync=1\n    cycle=1\n    local WPKey=databank.getStringValue(\"WP\")\n    WPKey=json.decode(WPKey)\n    if WPKey==nil then total_key_number=0 else total_key_number=#WPKey end\n    emitter.send(\"AviatorWPBaseSync\", \"<BaseData_n>\"..total_key_number)\n    timer_id=\"sync_data\"\n    timer_delay=1\n   end\n\n  --SYNC DATA\n   function sync_data()\n    if WPSent==nil then WPSent=false end\n    if FleetSent==nil then FleetSent=false end\n    if total_key_number>=cycle then\n     if not WPSent then\n      local WPKey=databank.getStringValue(\"WP\")\n      WPKey=json.decode(WPKey)\n      local extract_name=WPKey[index_sync].n\n      local extract_coord=WPKey[index_sync].c\n\n      if extract_coord~=\"\" then\n       local waypoint={wp_n=extract_name, wp_c=extract_coord}\n       local json_string=json.encode(waypoint, { indent=false })\n       emitter.send(\"AviatorWPBaseSync\", \"<WPBaseData>\"..json_string:gsub(\"\\\"\",\"@@@\"))\n       wp_synced=wp_synced+1\n      end\n     elseif WPSent then\n      local FleetKey=databank.getStringValue(\"Fleet\")\n      FleetKey=json.decode(FleetKey)\n      local extract_name=FleetKey[index_sync].n\n      local extract_id=FleetKey[index_sync].id\n\n      if extract_id~=\"\" then\n       local ship={sh_n=extract_name, sh_id=extract_id}\n       local json_string=json.encode(ship, { indent=false })\n       emitter.send(\"AviatorWPBaseSync\", \"<FleetBaseData>\"..json_string:gsub(\"\\\"\",\"@@@\"))\n       Ship_synced=Ship_synced+1\n      end\n     end\n\n     cycle=cycle+1\n     index_sync=index_sync+1\n     LuaScreen()\n     timer_id=\"sync_data\"\n     timer_delay=1\n    elseif (not WPSent and not FleetSent) then\n     WPSent=true\n     FleetSent=true\n     Ship_synced=0\n     index_sync=1\n     cycle=1\n     local FleetKey=databank.getStringValue(\"Fleet\")\n     FleetKey=json.decode(FleetKey)\n     total_key_number=#FleetKey\n     emitter.send(\"AviatorWPBaseSync\", \"<BaseData_n>\"..total_key_number)\n     timer_id=\"sync_data\"\n     timer_delay=1\n    else\n     WPSent=false\n     FleetSent=false\n     LuaScreen()\n    end\n   end\n\n  --WP STORED LIST\n   local function GenerateWPList()\n    WpStoredList={}\n    local WPKey=databank.getStringValue(\"WP\")\n    WPKey=json.decode(WPKey)\n\n    if WPKey~=nil then\n     for i, v in pairs(WPKey) do WpStoredList[i]=v.n end\n     table.sort(WpStoredList)\n    end\n    WpTableRows=#WpStoredList+2\n    if WpTableRows<18 then WpTableRows=18 end\n    WpStoredList=json.encode(WpStoredList)\n   end\n   GenerateWPList()\n\n  --ADD WP\n   function AddWP()\n    local name=rcv_msg.wp_n\n    local coord=rcv_msg.wp_c\n\n    local WPKey=databank.getStringValue(\"WP\")\n    WPKey=json.decode(WPKey)\n\n    local Check=false\n    if WPKey==nil then WPKey={} end\n    for i=1, #WPKey do\n     if WPKey[i].n==name then Check=true break end\n    end\n     \n    if not Check then table.insert(WPKey, {[\"n\"]=name,[\"c\"]=coord}) end\n\n    WPKey=json.encode(WPKey)\n    databank.setStringValue(\"WP\", WPKey)\n\n    GenerateWPList()\n    LuaScreen()\n   end\n  \n  --CLEAR WP\n   function ClearWP(x)\n    local WPKey=databank.getStringValue(\"WP\")\n    WPKey=json.decode(WPKey)\n\n    if x~=\"ALL\" then\n     for i=1, #WPKey do\n      if WPKey[i].n==x then\n       WPKey[i].n=\"\"\n       WPKey[i].c=\"\"\n       break\n      end\n     end\n    else WPKey={} end\n\n    local WPKey_Temp={}\n    local c=0\n    for i=1, #WPKey do\n     if WPKey[i].n~=\"\" then c=c+1 WPKey_Temp[c]=WPKey[i] end\n    end\n    WPKey=WPKey_Temp\n    \n    WPKey=json.encode(WPKey)\n    databank.setStringValue(\"WP\", WPKey)\n\n    GenerateWPList()\n    LuaScreen()\n   end\n\n  --FLEET STORED LIST\n   local function Fleet()\n    FleetList={}\n    local FleetKey=databank.getStringValue(\"Fleet\")\n    FleetKey=json.decode(FleetKey)\n\n    if FleetKey~=nil then\n     for i=1, #FleetKey do\n      if FleetKey[i].id~=\"\" then FleetList[i]=FleetKey[i].n..\"*\"\n      else FleetList[i]=FleetKey[i].n end\n     end\n     table.sort(FleetList)\n    end\n    \n    FleetTableRows=#FleetList+2\n    if FleetTableRows<18 then FleetTableRows=18 end\n    \n    FleetList=json.encode(FleetList)\n   end\n   Fleet()\n\n  --ADD SHIP\n   function AddShip(x)\n    local FleetKey=databank.getStringValue(\"Fleet\")\n    FleetKey=json.decode(FleetKey)\n\n    if FleetKey==nil then FleetKey={} end\n    \n    local Check=false\n    for i=1, #FleetKey do\n     if FleetKey[i].n==x then Check=true break end\n    end\n        \n    if not Check then table.insert(FleetKey, {[\"n\"]=x,[\"id\"]=\"\"}) end\n\n    FleetKey=json.encode(FleetKey)\n    databank.setStringValue(\"Fleet\", FleetKey)\n\n    Fleet()\n    LuaScreen()\n   end\n\n  --ADD SHIP ID\n   function AddShipID(name,id)\n    local FleetKey=databank.getStringValue(\"Fleet\")\n    FleetKey=json.decode(FleetKey)\n\n    for i=1, #FleetKey do\n     if FleetKey[i].n==name then FleetKey[i].id=id break end\n    end\n\n    FleetKey=json.encode(FleetKey)\n    databank.setStringValue(\"Fleet\", FleetKey)\n    Fleet()\n    LuaScreen()\n   end\n\n  --RWMOVE SHIP\n   function RemoveShip(x)\n    local FleetKey=databank.getStringValue(\"Fleet\")\n    FleetKey=json.decode(FleetKey)\n\n    if x~=\"ALL\" then\n     for i=1, #FleetKey do\n      if (FleetKey[i].n==x or FleetKey[i].n==x..\"*\")  then\n       FleetKey[i].n=\"\"\n       FleetKey[i].id=\"\"\n       break\n      end\n     end\n    \n     local FleetKey_temp={}\n     local c=0\n     for i=1, #FleetKey do\n      if FleetKey[i].n~=\"\" then\n       c=c+1\n       FleetKey_temp[c]=FleetKey[i]\n      end\n     end\n     FleetKey=FleetKey_temp\n    else\n     FleetKey={}\n    end\n\n    FleetKey=json.encode(FleetKey)\n    databank.setStringValue(\"Fleet\", FleetKey)\n\n    Fleet()\n    LuaScreen()\n   end\n\n --SCREEN SCRIPT BUILDIER\n  function LuaScreen()\n  --ScreenTable\n   local ScreenTable={}\n  --Parameters (1)\n   ScreenTable[1]=[[\n   local FontName=]].. FontName ..[[\n   local FontSize=]].. FontSize ..[[\n   local FontColorR, FontColorG, FontColorB=]].. Font_R ..[[, ]].. Font_G ..[[, ]]..Font_B ..[[\n   local TitleR, TitleG, TitleB=]].. Title_R ..[[, ]].. Title_G ..[[, ]]..Title_B ..[[\n   local ButtonColorR, ButtonColorG, ButtonColorB=]].. Button_R ..[[, ]].. Button_G ..[[, ]].. Button_B ..[[\n   local TableR, TableG, TableB=]].. Table_R ..[[, ]].. Table_G ..[[, ]].. Table_B ..[[\n   local ButtonPressedR, ButtonPressedG, ButtonPressedB=]].. Button_Pressed_R ..[[, ]].. Button_Pressed_G ..[[, ]].. Button_Pressed_B ..[[\n   local ButtonEdgeR, ButtonEdgeG, ButtonEdgeB=]].. ButtonEdgeR ..[[, ]].. ButtonEdgeG ..[[, ]].. ButtonEdgeB ..[[\n   local SelectColorR, SelectColorG, SelectColorB=]].. SelectColorR ..[[, ]].. SelectColorG ..[[, ]].. SelectColorB ..[[\n   local SelectedColorR, SelectedColorG, SelectedColorB=]].. Title_R ..[[, ]].. Title_G ..[[, ]]..Title_B ..[[\n   AddingShip=\"]].. AddingShip ..[[\"\n   ]]\n\n  --Setup (2)\n   ScreenTable[2]=[[\n   local json=require('dkjson')\n\n   --Layers\n    local L_table=createLayer()\n    local L_button=createLayer()\n    local L_SideBar=createLayer()\n    local L_SideBarBox=createLayer()\n    local L_text=createLayer()\n    local L_title=createLayer()\n    local L_select=createLayer()\n    local L_selected=createLayer()\n\n   --Cursor\n    local cx, cy=getCursor()\n\n   --Default\n    setDefaultFillColor(L_text, Shape_Text, FontColorR, FontColorG, FontColorB, 1)\n    setDefaultFillColor(L_title, Shape_Text, TitleR, TitleG, TitleB, 1)\n    setDefaultFillColor(L_select, Shape_Text, SelectColorR, SelectColorG, SelectColorB, 1)\n    setDefaultFillColor(L_selected, Shape_Text, SelectedColorR, SelectedColorG, SelectedColorB, 1)\n    setDefaultStrokeColor(L_table, Shape_Line, TableR, TableG, TableB, 1)\n    setDefaultStrokeWidth(L_table, Shape_Line, 1)\n    setDefaultStrokeWidth(L_table, Shape_Box, 1)\n    setDefaultStrokeColor(L_table, Shape_Box, ButtonEdgeR, ButtonEdgeG, ButtonEdgeB, 1)\n    setDefaultFillColor(L_table, Shape_Box, TableR, TableG, TableB, 0.2)\n    setDefaultStrokeWidth(L_SideBarBox, Shape_Box, 1)\n    setDefaultStrokeColor(L_SideBarBox, Shape_Box, TableR, TableG, TableB, 1)\n    setDefaultFillColor(L_SideBarBox, Shape_Box, 0, 0, 0, 0)\n    setDefaultFillColor(L_select, Shape_BoxRounded, SelectColorR, SelectColorG, SelectColorB, 0.2)\n    setDefaultStrokeColor(L_select, Shape_BoxRounded, ButtonEdgeR, ButtonEdgeG, ButtonEdgeB, 1)\n    setDefaultFillColor(L_button, Shape_BoxRounded, ButtonColorR, ButtonColorG, ButtonColorB, 1)\n    setDefaultStrokeColor(L_button, Shape_BoxRounded, ButtonEdgeR, ButtonEdgeG, ButtonEdgeB, 1)\n\n   --Fonts\n    local FontText=loadFont(FontName , FontSize)\n    local FontTitle=loadFont(FontName , FontSize+5)\n\n   --Function drawTextBox\n    function drawTextBox(font, text, x, y, w, h, r, layer)\n     local ww, hh=getTextBounds(font, text)\n     local layer=layer or L_button\n     if w==0 or w<ww then w=ww end if h==0 or h<hh then h=hh end\n     setNextStrokeWidth(layer, 0.2)\n     addBoxRounded(layer, x, y, w, h, r)\n     setNextTextAlign(L_text, AlignH_Center, AlignV_Middle)\n     addText(L_text, font, text, x+w/2, y+h/2)\n    end\n   ]]\n\n  --Lists (3)\n   ScreenTable[3]=[[\n   local ScrW=]].. ScrW ..[[\n   local ScrH=]].. ScrH ..[[\n   local Cell=]].. Cell ..[[\n\n   local WpStoredList={[0]=\"ALL\",]].. WpStoredList:gsub(\"[%[%]]+\",\"\") ..[[}\n   local FleetList={[0]=\"ALL\",]].. FleetList:gsub(\"[%[%]]+\",\"\") ..[[}\n\n   local X_List={}\n   local Columns=ScrW/Cell\n   for i=0, Columns do X_List[i]=Cell*i end\n   local Y_List={}\n   local Rows=0\n   local WPRows=]].. WpTableRows ..[[\n   local FleetRows=]].. FleetTableRows ..[[\n   if WPRows>=FleetRows then Rows=WPRows else Rows=FleetRows end\n   for i=0, Rows do Y_List[i]=Cell*i end\n\n   local WPStoreTitleList={[0]=\"WP Stored: \"..#WpStoredList}\n   local FleetTitleList={[0]=\"Fleet: \"..#FleetList}\n   local Buttons={\"Send Data To\",\"Clear WP\",\"Add Ship\",\"Remove Ship\"}\n   ]]\n\n  --WP Store Table (4)\n   ScreenTable[4]=[[\n   local T4_x1,T4_x2,T4_xt,T4_y1,T4_y2,T4_yt=0,0,0,0,0,0\n   for i=1, #Y_List do WPStoreTitleList[i]=i end\n   if WPStoreVpos==nil then WPStoreVpos=0 end\n   if WPSelected==nil then WPSelected=\"\" end\n\n   --WP Store Vertical Lines\n    for i=0, #X_List do\n     if (i==0 or i==2 or i==10) then \n      T4_x1=X_List[i]\n      if i~=2 then T4_y1=Y_List[0] else T4_y1=Y_List[1]+WPStoreVpos end\n      T4_x2=T4_x1\n      T4_y2=Y_List[#Y_List]\n      addLine(L_table, T4_x1, T4_y1, T4_x2, T4_y2)\n     end\n    end\n\n   --WP Store Horizontal Lines\n    for i=0, #Y_List do\n     T4_x1=X_List[0]\n     T4_y1=Y_List[i]+WPStoreVpos\n     T4_x2=X_List[10]\n     T4_y2=T4_y1\n     addLine(L_table, T4_x1, T4_y1, T4_x2, T4_y2)\n    end\n\n   --WP Store Side Bar\n    local xSideBarBox,ySideBarBox,wSideBarBox,hSideBarBox=X_List[10],Y_List[1],Cell,(Y_List[18]-Y_List[1]) \n    addBox(L_SideBarBox, xSideBarBox, ySideBarBox, wSideBarBox, hSideBarBox)\n\n    local xSideBar=X_List[10]+2\n    if ySideBar==nil then ySideBar=(Y_List[1]+2) end\n    if NweDeltaY==nil then NweDeltaY=0 end\n    if DeltaY==nil then DeltaY=0 end\n    if NewySideBar==nil then NewySideBar=(Y_List[1]+2) end\n    if OriginY==nil then OriginY=0 end\n    local wSideBar=Cell-4\n    local hSideBar=((17*544)/#WpStoredList)\n    if hSideBar>544 then hSideBar=544 end\n\n    if getCursorPressed() then OriginY=cy NewySideBar=ySideBar MEMWPStoreVpos=WPStoreVpos end\n    if (getCursorDown() and (cx>=xSideBar and cx<(xSideBar+wSideBar) and cy>ySideBar and cy<(ySideBar+hSideBar))) then\n     DeltaY=math.floor((OriginY-cy)*100)/100\n     if ((math.floor(NweDeltaY*100)/100~=math.floor(DeltaY*100)/100) and ySideBar>=(Y_List[1]+2) and (ySideBar+hSideBar)<=(Y_List[18]-2)) then\n      ySideBar=(NewySideBar-DeltaY)\n      NweDeltaY=DeltaY\n      WPStoreVpos=MEMWPStoreVpos+(DeltaY/544*(#WpStoredList*32))\n     end\n     if ySideBar<=(Y_List[1]+2) then\n      ySideBar=(Y_List[1]+2)\n      OriginY=cy\n      NewySideBar=ySideBar\n      MEMWPStoreVpos=(Y_List[0])\n     elseif (ySideBar+hSideBar)>=(Y_List[18]-2) then\n      ySideBar=((Y_List[18]-2)-hSideBar)\n      OriginY=cy\n      NewySideBar=ySideBar\n      MEMWPStoreVpos=((Y_List[0])-((#WpStoredList-17)*32))\n     end\n     setNextFillColor(L_SideBar, TitleR, TitleG, TitleB, 1)\n    else\n     setNextFillColor(L_SideBar, TitleR, TitleG, TitleB, 0.2)\n    end\n    addBox(L_SideBar, xSideBar, ySideBar, wSideBar, hSideBar)\n\n   --WP Store Text\n    for i=0, #Y_List do\n     if i==0 then\n      T4_xt=X_List[5]\n      T4_yt=Y_List[0]+(Cell/2)+WPStoreVpos\n     else\n      T4_xt=X_List[1]\n      T4_yt=Y_List[i]+(Cell/2)+WPStoreVpos\n     end\n     setNextTextAlign(L_title, AlignH_Center, AlignV_Middle)\n     addText(L_title, FontTitle, tostring(WPStoreTitleList[i]), T4_xt, T4_yt)\n    end\n\n   --WP Stored List\n    for i=0, #WpStoredList do\n     T4_xt=X_List[2]+(Cell/2)\n     T4_yt=Y_List[i+1]+(Cell/2)+WPStoreVpos\n     if (cx>X_List[2] and cx<X_List[10] and cy>(Y_List[i+1]+WPStoreVpos) and cy<(Y_List[i+1]+Cell+WPStoreVpos)) then\n      setNextTextAlign(L_select, AlignH_Left, AlignV_Middle)\n      addText(L_select, FontText, WpStoredList[i], T4_xt, T4_yt)\n      if getCursorPressed() then WPSelected=WpStoredList[i] end\n     else\n      setNextTextAlign(L_text, AlignH_Left, AlignV_Middle)\n      addText(L_text, FontText, WpStoredList[i], T4_xt, T4_yt)\n     end\n    end\n   ]]\n\n  --Fleet Table (5)\n   ScreenTable[5]=[[\n   local T5_x1,T5_x2,T5_xt,T5_y1,T5_y2,T5_yt=0,0,0,0,0,0\n   for i=1, #Y_List do FleetTitleList[i]=i end\n   if FleetVpos==nil then FleetVpos=0 end\n   if FleetSelected==nil then FleetSelected=\"\" end\n\n   --Fleet Vertical Lines\n    for i=0, #X_List do\n     if (i==12 or i==14 or i==22) then \n      T5_x1=X_List[i]\n      if i~=14 then T5_y1=Y_List[0] else T5_y1=Y_List[1]+FleetVpos end\n      T5_x2=T5_x1\n      T5_y2=Y_List[#Y_List]\n      addLine(L_table, T5_x1, T5_y1, T5_x2, T5_y2)\n     end\n    end\n\n   --Fleet Horizontal Lines\n    for i=0, #Y_List do\n     T5_x1=X_List[12]\n     T5_y1=Y_List[i]+FleetVpos\n     T5_x2=X_List[22]\n     T5_y2=T5_y1\n     addLine(L_table, T5_x1, T5_y1, T5_x2, T5_y2)\n    end\n\n   --Fleet Side Bar\n    local xSideBarBox2,ySideBarBox2,wSideBarBox2,hSideBarBox2=X_List[22],Y_List[1],Cell,(Y_List[18]-Y_List[1]) \n    addBox(L_SideBarBox, xSideBarBox2, ySideBarBox2, wSideBarBox2, hSideBarBox2)\n\n    local xSideBar2=X_List[22]+2\n    if ySideBar2==nil then ySideBar2=(Y_List[1]+2) end\n    if NweDeltaY2==nil then NweDeltaY2=0 end\n    if DeltaY2==nil then DeltaY2=0 end\n    if NewySideBar2==nil then NewySideBar2=(Y_List[1]+2) end\n    if OriginY2==nil then OriginY2=0 end\n    local wSideBar2=Cell-4\n    local hSideBar2=((17*544)/#FleetList)\n    if hSideBar2>544 then hSideBar2=544 end\n\n    if getCursorPressed() then OriginY2=cy NewySideBar2=ySideBar2 MEMFleetVpos=FleetVpos end\n    if (getCursorDown() and (cx>=xSideBar2 and cx<(xSideBar2+wSideBar2) and cy>ySideBar2 and cy<(ySideBar2+hSideBar2))) then\n     DeltaY2=math.floor((OriginY2-cy)*100)/100\n     if ((math.floor(NweDeltaY2*100)/100~=math.floor(DeltaY2*100)/100) and ySideBar2>=(Y_List[1]+2) and (ySideBar2+hSideBar2)<=(Y_List[18]-2)) then\n      ySideBar2=(NewySideBar2-DeltaY2)\n      NweDeltaY2=DeltaY2\n      FleetVpos=MEMFleetVpos+(DeltaY2/544*(#FleetList*32))\n     end\n     if ySideBar2<=(Y_List[1]+2) then\n      ySideBar2=(Y_List[1]+2)\n      OriginY2=cy\n      NewySideBar2=ySideBar2\n      MEMFleetVpos=(Y_List[0])\n     elseif (ySideBar2+hSideBar2)>=(Y_List[18]-2) then\n      ySideBar2=((Y_List[18]-2)-hSideBar2)\n      OriginY2=cy\n      NewySideBar2=ySideBar2\n      MEMFleetVpos=((Y_List[0])-((#FleetList-17)*32))\n     end\n     setNextFillColor(L_SideBar, TitleR, TitleG, TitleB, 1)\n    else\n     setNextFillColor(L_SideBar, TitleR, TitleG, TitleB, 0.2)\n    end\n    addBox(L_SideBar, xSideBar2, ySideBar2, wSideBar2, hSideBar2)\n   \n   --Fleet Text\n    for i=0, #Y_List do\n     if i==0 then\n      T5_xt=X_List[17]\n      T5_yt=Y_List[0]+(Cell/2)+FleetVpos\n     else\n      T5_xt=X_List[13]\n      T5_yt=Y_List[i]+(Cell/2)+FleetVpos\n     end\n     setNextTextAlign(L_title, AlignH_Center, AlignV_Middle)\n     addText(L_title, FontTitle, tostring(FleetTitleList[i]), T5_xt, T5_yt)\n    end\n\n   --Fleet List\n    for i=0, #FleetList do\n     local name=FleetList[i]\n     T5_xt=X_List[14]+(Cell/2)\n     T5_yt=Y_List[i+1]+(Cell/2)+FleetVpos\n     if (cx>X_List[14] and cx<X_List[22] and cy>(Y_List[i+1]+FleetVpos) and cy<(Y_List[i+1]+Cell+FleetVpos)) then\n      name=name:gsub(\"*\", \"\")\n      setNextTextAlign(L_select, AlignH_Left, AlignV_Middle)\n      addText(L_select, FontText, name, T5_xt, T5_yt)\n      if getCursorPressed() then FleetSelected=name end\n     else\n      setNextTextAlign(L_text, AlignH_Left, AlignV_Middle)\n      local check=string.match(name, \"*\")\n      if check then setNextFillColor(L_text, 0,1,0,1) name=name:gsub(\"*\", \"\") end\n      addText(L_text, FontText, name, T5_xt, T5_yt)\n     end\n    end\n   ]]\n\n  --Buttons Table (6)\n   ScreenTable[6]=[[\n   MouseOutput=\"\"\n   local T6_font,T6_text,T6_x,T6_y,T6_w,T6_h,T6_r=FontText,\"\",X_List[25],0,(X_List[31]-X_List[25]),Cell,5\n   local T6_xb,T6_yb,T6_wb,T6_hb=T6_x,0,T6_w,T6_h\n\n   --Buttons\n    for i=1, #Buttons do\n     T6_text=Buttons[i]\n     if i==1 then T6_y=Y_List[1] T6_yb=Y_List[2]\n     elseif i==2 then T6_y=Y_List[5] T6_yb=Y_List[6]\n     elseif i==3 then T6_y=Y_List[9] T6_yb=Y_List[10]\n     elseif i==4 then T6_y=Y_List[13] T6_yb=Y_List[14]\n     end\n     if (cx>=T6_x and cx<(T6_x+T6_w) and cy>T6_y and cy<(T6_y+T6_h)) then\n      drawTextBox(T6_font, T6_text, T6_x, T6_y, T6_w, T6_h, T6_r, L_select)\n     else\n      drawTextBox(T6_font, T6_text, T6_x, T6_y, T6_w, T6_h, T6_r)\n     end\n     addBox(L_table, T6_xb, T6_yb, T6_wb, T6_hb)\n     if (WPSelected~=\"\" and T6_text==\"Clear WP\") then\n      setNextTextAlign(L_title, AlignH_Center, AlignV_Middle)\n      addText(L_title, FontTitle, WPSelected, (T6_xb+T6_wb/2), (T6_yb+T6_hb/2))\n     end\n     if (FleetSelected~=\"\" and (T6_text==\"Send Data To\" or T6_text==\"Remove Ship\")) then\n      FleetSelected=FleetSelected:gsub(\"*\", \"\")\n      setNextTextAlign(L_title, AlignH_Center, AlignV_Middle)\n      addText(L_title, FontTitle, FleetSelected, (T6_xb+T6_wb/2), (T6_yb+T6_hb/2))\n     end\n     if (AddingShip~=\"\" and T6_text==\"Add Ship\") then\n      setNextTextAlign(L_title, AlignH_Center, AlignV_Middle)\n      addText(L_title, FontTitle, AddingShip, (T6_xb+T6_wb/2), (T6_yb+T6_hb/2))\n     end\n    end\n\n   --Button Click\n    if getCursorPressed() then\n     if (cx>T6_x and cx<(T6_x+T6_w)) then\n      if (FleetSelected~=\"\" and (cy>Y_List[1] and cy<Y_List[2])) then\n       MouseOutput={FleetSelected,\"Send Data To\"}\n       MouseOutput=json.encode(MouseOutput)\n       FleetSelected=\"\"\n      elseif (WPSelected~=\"\" and (cy>Y_List[5] and cy<Y_List[6])) then\n       MouseOutput={WPSelected,\"Clear WP\"}\n       MouseOutput=json.encode(MouseOutput)\n       WPSelected=\"\"\n      elseif (AddingShip~=\"\" and (cy>Y_List[9] and cy<Y_List[10])) then\n       MouseOutput={AddingShip,\"Add Ship\"}\n       MouseOutput=json.encode(MouseOutput)\n       AddingShip=\"\"\n      elseif (FleetSelected~=\"\" and (cy>Y_List[13] and cy<Y_List[14])) then\n       MouseOutput={FleetSelected,\"Remove Ship\"}\n       MouseOutput=json.encode(MouseOutput)\n       FleetSelected=\"\"\n      end\n     end\n     setOutput(MouseOutput)\n    end\n   ]]\n\n  --Animation (7)\n   ScreenTable[7]=[[\n   requestAnimationFrame(1)\n   --local rslib=require('rslib')\n   --rslib.drawRenderCost ()]]\n\n  --RENDER\n   function ScreenRender()\n    local Menu_Interface=table.concat(ScreenTable)\n\n    screen.setRenderScript(Menu_Interface)\n   end\n   ScreenRender()\n  end\n  LuaScreen()\n--","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"3"},{"code":"--unit.onStop()\n screen.setCenteredText(\"WP Sync\")\n--","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"4"},{"code":"--unit.onTimer(\"Delay_Emitter\")\n timer_delay=timer_delay-1\n if timer_delay==0 then\n  if timer_id==\"<BaseShipId>\" then emitter.send(\"AviatorWPBaseSync\", \"<BaseShipId>\"..ship_id_rqst)\n  elseif timer_id==\"<SendDataToBase>\" then emitter.send(\"AviatorWPBaseSync\", \"<DownlinkApproved>\"..ship_id_rqst)\n  elseif timer_id==\"<ConstructIDRqst>\" then emitter.send(\"AviatorWPBaseSync\", \"<ConstructIDRqst>\"..ship_id_rqst)\n  elseif timer_id==\"sync_data\" then sync_data()\n  elseif timer_id==\"init_sending\" then init_sending()\n  elseif timer_id==\"SendDataTo\" then emitter.send(\"AviatorWPBaseSync\", \"<SendDataTo>\"..SendingDataTo)\n   timer_id=\"init_sending\"\n   timer_delay=2\n  end\n end\n--","filter":{"args":[{"value":"Delay_Emitter"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"5"},{"code":"--system.onInputText(*)\n local input_text=text\n if (input_text~=nil and input_text~=\"\") then AddingShip=input_text end\n LuaScreen()\n AddingShip=\"\"\n--","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"6"},{"code":"--library.onStart()\n function ColorConvert(x)\n  local y=tonumber(x)/255\n  return y\n end\n--","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"7"}],"methods":[],"events":[]}