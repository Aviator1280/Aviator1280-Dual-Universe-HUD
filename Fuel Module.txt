{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"databank","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"fuel_data()","filter":{"args":[{"value":"update"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"0"},{"code":"--unit.onStart()\n    local SoftwareVersion=\"v6.1.0\"\n    databank.setStringValue(\"Fuel Module ver\", SoftwareVersion)\n    databank.setStringValue(\"Fuel Module\", \"true\")\n\n    --INITIALIZE FUEL TANKS\n        slot = {}\n        slot[1] = {slot1 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[2] = {slot2 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[3] = {slot3 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[4] = {slot4 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[5] = {slot5 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[6] = {slot6 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[7] = {slot7 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[8] = {slot8 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[9] = {slot9 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[10] = {slot10 ,{[\"class\"]=\"\" ,[\"element\"]=\"\", [\"number\"]=\"\"}}\n\n        atmofueltank_size = 0\n        spacefueltank_size = 0\n        rocketfueltank_size = 0\n\n        for i= 1, #slot do\n            local slot_id = slot[i]\n            if slot_id[1] then\n                local class = slot_id[1].getClass()\n                if class == \"AtmoFuelContainer\" then\n                    AtmoTank = \"true\"\n                    databank.setStringValue(\"AtmoFuelContainer\", AtmoTank)\n                    atmofueltank_size = atmofueltank_size +1\n                    local element = \"atmofueltank_\"..atmofueltank_size\n                    slot_id[2] = {[\"class\"]=class ,[\"element\"]=element, [\"number\"]=atmofueltank_size}\n                end\n                if class == \"SpaceFuelContainer\" then\n                    SpaceTank = \"true\"\n                    databank.setStringValue(\"SpaceFuelContainer\", SpaceTank)\n                    spacefueltank_size = spacefueltank_size +1\n                    local element = \"spacefueltank_\"..spacefueltank_size\n                    slot_id[2] = {[\"class\"]=class ,[\"element\"]=element, [\"number\"]=spacefueltank_size}\n                end\n                if class == \"RocketFuelContainer\" then\n                    RocketTank = \"true\"\n                    databank.setStringValue(\"RocketFuelContainer\", RocketTank)\n                    rocketfueltank_size = rocketfueltank_size +1\n                    local element = \"rocketfueltank_\"..rocketfueltank_size\n                    slot_id[2] = {[\"class\"]=class ,[\"element\"]=element, [\"number\"]=rocketfueltank_size}\n                end\n            end\n        end\n\n    --NUMBER OF TANKS\n        if atmofueltank_size > 0 then\n            a_fuel_tank_n = atmofueltank_size\n            databank.setIntValue(\"a_fuel_tank_n\", a_fuel_tank_n)\n        else\n            a_fuel_tank_n = 0\n        end\n\n        if spacefueltank_size > 0 then\n            s_fuel_tank_n = spacefueltank_size\n            databank.setIntValue(\"s_fuel_tank_n\", s_fuel_tank_n)\n        else\n            s_fuel_tank_n = 0\n        end\n\n        if rocketfueltank_size > 0 then\n            r_fuel_tank_n = rocketfueltank_size\n            databank.setIntValue(\"r_fuel_tank_n\", r_fuel_tank_n)\n        else\n            r_fuel_tank_n = 0\n        end\n\n\n    --FUEL DATA\n        function fuel_data()\n\n        --FUEL MASS\n            fuel_mass = 0\n            function total_fuel_mass()\n                if atmofueltank_size > 0 then\n                    a_fuel_mass = 0\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            a_fuel_mass = a_fuel_mass + slot_id[1].getItemsMass()\n                            t_a_fuel_mass = math.floor(a_fuel_mass/1000*10)/10\n                        end\n                    end\n                end\n\n                if spacefueltank_size > 0 then\n                    s_fuel_mass = 0\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            s_fuel_mass = s_fuel_mass + slot_id[1].getItemsMass()\n                            t_s_fuel_mass = math.floor(s_fuel_mass/1000*10)/10\n                        end\n                    end\n                end\n\n                if rocketfueltank_size > 0 then\n                    r_fuel_mass = 0\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            r_fuel_mass = r_fuel_mass + slot_id[1].getItemsMass()\n                            t_r_fuel_mass = math.floor(r_fuel_mass/1000*10)/10\n                        end\n                    end\n                end\n            end\n            total_fuel_mass()\n\n        --AVG FUEL PERCENTAGE\n            s_fuel_percent_avg_hud = 0\n            a_fuel_percent_avg_hud = 0\n            r_fuel_percent_avg_hud = 0\n\n            function avg_fuel_percentage()\n                local a_fuel_percent = 0\n                if atmofueltank_size > 0 then\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                a_fuel_percent = a_fuel_percent + json.decode(slot_id[1].getWidgetData()).percentage\n                            end\n                        end\n                    end\n                    a_fuel_percent_avg_hud = math.ceil(a_fuel_percent/atmofueltank_size)\n                else\n                    a_fuel_percent_avg_hud = [[n/a]]\n                end\n\n                local s_fuel_percent = 0\n                if spacefueltank_size > 0 then\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                s_fuel_percent = s_fuel_percent + json.decode(slot_id[1].getWidgetData()).percentage\n                            end\n                        end\n                    end\n                    s_fuel_percent_avg_hud = math.ceil(s_fuel_percent/spacefueltank_size)\n                else\n                    s_fuel_percent_avg_hud = [[n/a]]\n                end\n\n                local r_fuel_percent = 0\n                if rocketfueltank_size > 0 then\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                r_fuel_percent = r_fuel_percent + json.decode(slot_id[1].getWidgetData()).percentage\n                            end\n                        end\n                    end\n                    r_fuel_percent_avg_hud = math.ceil(r_fuel_percent/rocketfueltank_size)\n                else\n                    r_fuel_percent_avg_hud = [[n/a]]\n                end\n            end\n            avg_fuel_percentage()\n\n        --ATMO FUEL WARNING\n            a_fuelspy_hud = [[<span style=\" color:#141fad\">A Fuel</span>]]\n            a_fuelwarning_hud = [[ ]]\n\n            if atmofueltank_size > 0 then\n                function atmo_fuel_percent()\n                    local fuelpercent = 0\n                    a_fuelwarning_hud = [[ ]]\n                    a_fuelspy_hud = [[<span style=\" color:#141fad\">A Fuel</span>]]\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                fuelpercent = json.decode(slot_id[1].getWidgetData()).percentage\n                                if fuelpercent < 20 and fuelpercent > 0 then\n                                    a_fuelspy_hud = [[<span style=\" color:orange\">A Fuel</span>]] \n                                    a_fuelwarning_hud = a_fuelwarning_hud ..[[<span style=\" color: orange\">A Fuel Tank ]]..slot_id[2].number..[[ LO LVL</span><br>]]\n                                elseif fuelpercent == 0 then\n                                    a_fuelspy_hud = [[<span style=\" color:red\">A Fuel</span>]]\n                                    a_fuelwarning_hud = a_fuelwarning_hud.. [[<span style=\" color: red\">A Fuel Tank ]]..slot_id[2].number..[[ EMPTY</span><br>]]\n                                end\n                            end\n                        end\n                    end\n                    return a_fuelspy_hud, a_fuelwarning_hud\n                end\n                atmo_fuel_percent()\n            end\n\n        --SPACE FUEL WARNING\n            s_fuelspy_hud = [[<span style=\" color:#141fad\">S Fuel</span>]]\n            s_fuelwarning_hud = [[ ]]\n\n            if spacefueltank_size > 0 then\n                function space_fuel_percent()\n                    local fuelpercent = 0\n                    s_fuelwarning_hud = [[ ]]\n                    s_fuelspy_hud = [[<span style=\" color:#141fad\">S Fuel</span>]]\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                fuelpercent = json.decode(slot_id[1].getWidgetData()).percentage\n                                if fuelpercent < 20 and fuelpercent > 0 then\n                                    s_fuelspy_hud = [[<span style=\" color:orange\">S Fuel</span>]] \n                                    s_fuelwarning_hud = s_fuelwarning_hud ..[[<span style=\" color: orange\">S Fuel Tank ]]..slot_id[2].number..[[ LO LVL</span><br>]]\n                                elseif fuelpercent == 0 then\n                                    s_fuelspy_hud = [[<span style=\" color:red\">S Fuel</span>]]\n                                    s_fuelwarning_hud = s_fuelwarning_hud.. [[<span style=\" color: red\">S Fuel Tank ]]..slot_id[2].number..[[ EMPTY</span><br>]]\n                                end\n                            end\n                        end\n                    end\n                    return s_fuelspy_hud, s_fuelwarning_hud\n                end\n                space_fuel_percent()\n            end\n\n        --ROCKET FUEL WARNING\n            r_fuelspy_hud = [[<span style=\" color:#141fad\">R Fuel</span>]]\n            r_fuelwarning_hud = [[ ]]\n            r_active_hud = [[#141fad]]\n\n            if rocketfueltank_size > 0 then\n                function rocket_fuel_percent()\n                    local fuelpercent = 0\n                    r_fuelwarning_hud = [[ ]]\n                    r_fuelspy_hud = [[<span style=\" color:#141fad\">R Fuel</span>]]\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                fuelpercent = json.decode(slot_id[1].getWidgetData()).percentage\n                                if fuelpercent < 20 and fuelpercent > 0 then\n                                    r_fuelspy_hud = [[<span style=\" color:orange\">R Fuel</span>]] \n                                    r_fuelwarning_hud = r_fuelwarning_hud ..[[<span style=\" color: orange\">R Fuel Tank ]]..slot_id[2].number..[[ LO LVL</span><br>]]\n                                elseif fuelpercent == 0 then\n                                    r_fuelspy_hud = [[<span style=\" color:red\">R Fuel</span>]]\n                                    r_fuelwarning_hud = r_fuelwarning_hud.. [[<span style=\" color: red\">R Fuel Tank ]]..slot_id[2].number..[[ EMPTY</span><br>]]\n                                end\n                            end\n                        end\n                    end\n                    return r_fuelspy_hud, r_fuelwarning_hud\n                end\n                rocket_fuel_percent()\n\n                function r_warning_light()\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            r_active_hud = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if r_active_hud == \"n/a\" then\n                                r_active_hud = [[#141fad]]\n                            else\n                                r_active_hud = [[red]]\n                            end\n                        end\n                    end\n                    return r_active_hud\n                end\n                r_warning_light()\n            end\n\n        --ATMO FUEL MIN TIME\n            a_t_h = 0\n            a_t_m = 0\n            a_t_s = 0\n\n            if atmofueltank_size > 0 then\n                function a_fuel_minimum_time()\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            a_minutes_min = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if a_minutes_min ~= \"n/a\" then\n                                a_minutes_min = a_minutes_min\n                                break\n                            else\n                                a_minutes_min = 0\n                            end\n                        end\n                    end\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            local timeleft = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if timeleft ~= \"n/a\" and timeleft > 0 then\n                                if timeleft < a_minutes_min then\n                                    a_minutes_min = timeleft\n                                end\n                            end\n                        end\n                    end\n                    a_t_h = a_minutes_min/3600\n                    a_t_m = (a_t_h-(math.floor(a_t_h)))*60\n                    a_t_s = (a_t_m-(math.floor(a_t_m)))*60\n                    return a_t_h, a_t_m, a_t_s\n                end\n                a_fuel_minimum_time()\n            end\n\n        --SPACE FUEL MIN TIME\n            s_t_h = 0\n            s_t_m = 0\n            s_t_s = 0\n\n            if spacefueltank_size > 0 then\n                function s_fuel_minimum_time()\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            s_minutes_min = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if s_minutes_min ~= \"n/a\" then\n                                s_minutes_min = s_minutes_min\n                                break\n                            else\n                                s_minutes_min = 0\n                            end\n                        end\n                    end\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            local timeleft = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if timeleft ~= \"n/a\" and timeleft > 0 then\n                                if timeleft < s_minutes_min then\n                                    s_minutes_min = timeleft\n                                end\n                            end\n                        end\n                    end\n                    s_t_h = s_minutes_min/3600\n                    s_t_m = (s_t_h-(math.floor(s_t_h)))*60\n                    s_t_s = (s_t_m-(math.floor(s_t_m)))*60\n                    return s_t_h, s_t_m, s_t_s\n                end\n                s_fuel_minimum_time()\n            end\n\n        --ROCKET FUEL MIN TIME\n            r_t_h = 0\n            r_t_m = 0\n            r_t_s = 0\n\n            if rocketfueltank_size > 0 then\n                function r_fuel_minimum_time()\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            r_minutes_min = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if r_minutes_min ~= \"n/a\" then\n                                r_minutes_min = r_minutes_min\n                                break\n                            else\n                                r_minutes_min = 0\n                            end\n                        end\n                    end\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            local timeleft = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if timeleft ~= \"n/a\" and timeleft > 0 then\n                                if timeleft < r_minutes_min then\n                                    r_minutes_min = timeleft\n                                end\n                            end\n                        end\n                    end\n                    r_t_h = r_minutes_min/3600\n                    r_t_m = (r_t_h-(math.floor(r_t_h)))*60\n                    r_t_s = (s_t_m-(math.floor(r_t_m)))*60\n                    return r_t_h, r_t_m, r_t_s\n                end\n                r_fuel_minimum_time()\n            end\n\n        --DATA ASEMBLER\n           if AtmoTank == \"true\" then\n            local atmo_data = {\n                [\"t_a_fuel_mass\"]=t_a_fuel_mass,\n                [\"a_fuel_percent_avg_hud\"]=a_fuel_percent_avg_hud,\n                [\"a_fuelspy_hud\"]=a_fuelspy_hud,\n                [\"a_fuelwarning_hud\"]=a_fuelwarning_hud,\n                [\"a_t_h\"]=math.floor(a_t_h),\n                [\"a_t_m\"]=math.floor(a_t_m),\n                [\"a_t_s\"]=math.floor(a_t_s)\n            }\n            atmo_data = json.encode(atmo_data)\n            databank.setStringValue(\"atmo_data\", atmo_data:gsub(\"\\\"\",\"@@@\"))\n           end\n           if SpaceTank == \"true\" then\n            local space_data = {\n                [\"t_s_fuel_mass\"]=t_s_fuel_mass,\n                [\"s_fuel_percent_avg_hud\"]=s_fuel_percent_avg_hud,\n                [\"s_fuelspy_hud\"]=s_fuelspy_hud,\n                [\"s_fuelwarning_hud\"]=s_fuelwarning_hud,\n                [\"s_t_h\"]=math.floor(s_t_h),\n                [\"s_t_m\"]=math.floor(s_t_m),\n                [\"s_t_s\"]=math.floor(s_t_s)\n            }\n            space_data = json.encode(space_data)\n            databank.setStringValue(\"space_data\", space_data:gsub(\"\\\"\",\"@@@\"))\n           end\n           if RocketTank == \"true\" then\n            local rocket_data = {\n                [\"r_s_fuel_mass\"]=t_r_fuel_mass,\n                [\"r_fuel_percent_avg_hud\"]=r_fuel_percent_avg_hud,\n                [\"r_fuelspy_hud\"]=r_fuelspy_hud,\n                [\"r_fuelwarning_hud\"]=r_fuelwarning_hud,\n                [\"r_active_hud\"]=r_active_hud,\n                [\"r_t_h\"]=math.floor(r_t_h),\n                [\"r_t_m\"]=math.floor(r_t_m),\n                [\"r_t_s\"]=math.floor(r_t_s)\n            }\n            rocket_data = json.encode(rocket_data)\n            databank.setStringValue(\"rocket_data\", rocket_data:gsub(\"\\\"\",\"@@@\"))\n           end\n        end\n        fuel_data()\n\n        unit.setTimer(\"update\", 1)\n--","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"databank.setStringValue(\"Fuel Module\", \"false\")\ndatabank.setStringValue(\"AtmoFuelContainer\", \"false\")\ndatabank.setStringValue(\"SpaceFuelContainer\", \"false\")\ndatabank.setStringValue(\"RocketFuelContainer\", \"false\")","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}