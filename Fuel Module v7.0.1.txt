{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"db","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--[[\n\nAuthor: Aviator1280\n\n--]]\n\n--unit.onStart()\n    local SoftwareVersion=\"v7.0.1\"\n    db.setStringValue(\"Fuel Module ver\", SoftwareVersion)\n    db.setStringValue(\"Fuel Module\", \"true\")\n    system.print(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\")\n    system.print(\"FUEL MODULE System ONLINE\")\n    system.print(\"Release \"..SoftwareVersion)\n    system.print(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\")\n\n    --INITIALIZE FUEL TANKS/SCREEN\n        slot = {}\n        slot[1] = {slot1 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[2] = {slot2 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[3] = {slot3 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[4] = {slot4 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[5] = {slot5 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[6] = {slot6 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[7] = {slot7 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[8] = {slot8 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[9] = {slot9 ,{[\"class\"]=\"\", [\"element\"]=\"\", [\"number\"]=\"\"}}\n        slot[10] = {slot10 ,{[\"class\"]=\"\" ,[\"element\"]=\"\", [\"number\"]=\"\"}}\n\n        atmofueltank_size = 0\n        spacefueltank_size = 0\n        rocketfueltank_size = 0\n        ScreenUnit = false\n\n        for i= 1, #slot do\n            local slot_id = slot[i]\n            if slot_id[1] then\n                local class = slot_id[1].getClass()\n                if class == \"AtmoFuelContainer\" then\n                    AtmoTank = \"true\"\n                    db.setStringValue(\"AtmoFuelContainer\", AtmoTank)\n                    atmofueltank_size = atmofueltank_size +1\n                    local element = \"atmofueltank_\"..atmofueltank_size\n                    slot_id[2] = {[\"class\"]=class ,[\"element\"]=element, [\"number\"]=atmofueltank_size}\n                end\n                if class == \"SpaceFuelContainer\" then\n                    SpaceTank = \"true\"\n                    db.setStringValue(\"SpaceFuelContainer\", SpaceTank)\n                    spacefueltank_size = spacefueltank_size +1\n                    local element = \"spacefueltank_\"..spacefueltank_size\n                    slot_id[2] = {[\"class\"]=class ,[\"element\"]=element, [\"number\"]=spacefueltank_size}\n                end\n                if class == \"RocketFuelContainer\" then\n                    RocketTank = \"true\"\n                    db.setStringValue(\"RocketFuelContainer\", RocketTank)\n                    rocketfueltank_size = rocketfueltank_size +1\n                    local element = \"rocketfueltank_\"..rocketfueltank_size\n                    slot_id[2] = {[\"class\"]=class ,[\"element\"]=element, [\"number\"]=rocketfueltank_size}\n                end\n                if class == \"ScreenUnit\" then\n                    ScreenUnit = true\n                    ScreenSlot = slot[i][1]\n                end\n            end\n        end\n\n    --NUMBER OF TANKS\n        if atmofueltank_size > 0 then\n            a_fuel_tank_n = atmofueltank_size\n            db.setIntValue(\"a_fuel_tank_n\", a_fuel_tank_n)\n        else\n            a_fuel_tank_n = 0\n        end\n\n        if spacefueltank_size > 0 then\n            s_fuel_tank_n = spacefueltank_size\n            db.setIntValue(\"s_fuel_tank_n\", s_fuel_tank_n)\n        else\n            s_fuel_tank_n = 0\n        end\n\n        if rocketfueltank_size > 0 then\n            r_fuel_tank_n = rocketfueltank_size\n            db.setIntValue(\"r_fuel_tank_n\", r_fuel_tank_n)\n        else\n            r_fuel_tank_n = 0\n        end\n\n        if ScreenUnit then\n            TotalFuelTanks=a_fuel_tank_n+s_fuel_tank_n+r_fuel_tank_n\n        end\n\n    --FUEL DATA\n        function fuel_data()\n\n        --FUEL MASS\n            fuel_mass = 0\n            function total_fuel_mass()\n                if atmofueltank_size > 0 then\n                    a_fuel_mass = 0\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            a_fuel_mass = a_fuel_mass + slot_id[1].getItemsMass()\n                            t_a_fuel_mass = math.floor(a_fuel_mass/1000*10)/10\n                        end\n                    end\n                end\n\n                if spacefueltank_size > 0 then\n                    s_fuel_mass = 0\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            s_fuel_mass = s_fuel_mass + slot_id[1].getItemsMass()\n                            t_s_fuel_mass = math.floor(s_fuel_mass/1000*10)/10\n                        end\n                    end\n                end\n\n                if rocketfueltank_size > 0 then\n                    r_fuel_mass = 0\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            r_fuel_mass = r_fuel_mass + slot_id[1].getItemsMass()\n                            t_r_fuel_mass = math.floor(r_fuel_mass/1000*10)/10\n                        end\n                    end\n                end\n            end\n            total_fuel_mass()\n\n        --AVG FUEL PERCENTAGE\n            s_fuel_percent_avg_hud = 0\n            a_fuel_percent_avg_hud = 0\n            r_fuel_percent_avg_hud = 0\n            if ScreenUnit then FT_List={} end\n\n            function avg_fuel_percentage()\n                local a_fuel_percent = 0\n                if atmofueltank_size > 0 then\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                local Percentage=json.decode(slot_id[1].getWidgetData()).percentage\n                                if ScreenUnit then FT_List[i]={class; Percentage} end\n                                a_fuel_percent = a_fuel_percent + Percentage\n                            end\n                        end\n                    end\n                    a_fuel_percent_avg_hud = math.ceil(a_fuel_percent/atmofueltank_size)\n                else\n                    a_fuel_percent_avg_hud = [[n/a]]\n                end\n\n                local s_fuel_percent = 0\n                if spacefueltank_size > 0 then\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                local Percentage=json.decode(slot_id[1].getWidgetData()).percentage\n                                if ScreenUnit then FT_List[i]={class; Percentage} end\n                                s_fuel_percent = s_fuel_percent + Percentage\n                            end\n                        end\n                    end\n                    s_fuel_percent_avg_hud = math.ceil(s_fuel_percent/spacefueltank_size)\n                else\n                    s_fuel_percent_avg_hud = [[n/a]]\n                end\n\n                local r_fuel_percent = 0\n                if rocketfueltank_size > 0 then\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                local Percentage=json.decode(slot_id[1].getWidgetData()).percentage\n                                if ScreenUnit then FT_List[i]={class; Percentage} end\n                                r_fuel_percent = r_fuel_percent + Percentage\n                            end\n                        end\n                    end\n                    r_fuel_percent_avg_hud = math.ceil(r_fuel_percent/rocketfueltank_size)\n                else\n                    r_fuel_percent_avg_hud = [[n/a]]\n                end\n\n                if ScreenUnit then\n                 New_FT_List={}\n                 local c=1\n                 for i=1, 10 do\n                  if FT_List[i]~=nil then\n                   New_FT_List[c]={[1]=FT_List[i][1]; [2]=FT_List[i][2]}\n                   c=c+1\n                  end\n                 end\n                 FT_List=New_FT_List\n\n                 ScreenSlot.setScriptInput(json.encode(FT_List))\n                end\n            end\n            avg_fuel_percentage()\n\n        --ATMO FUEL WARNING\n            AFuelSpy = [[<span style=\" color:#141fad\">A Fuel</span>]]\n            AFuelWrn = [[]]\n\n            if atmofueltank_size > 0 then\n                function atmo_fuel_percent()\n                    local fuelpercent = 0\n                    AFuelWrn = [[]]\n                    AFuelSpy = [[<span style=\" color:#141fad\">A Fuel</span>]]\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                fuelpercent = json.decode(slot_id[1].getWidgetData()).percentage\n                                if fuelpercent < 20 and fuelpercent > 0 then\n                                    AFuelSpy = [[<span style=\" color:orange\">A Fuel</span>]] \n                                    AFuelWrn = AFuelWrn ..[[<span style=\" color: orange\">A Fuel Tank ]]..slot_id[2].number..[[ LO LVL</span><br>]]\n                                elseif fuelpercent == 0 then\n                                    AFuelSpy = [[<span style=\" color:red\">A Fuel</span>]]\n                                    AFuelWrn = AFuelWrn.. [[<span style=\" color: red\">A Fuel Tank ]]..slot_id[2].number..[[ EMPTY</span><br>]]\n                                end\n                            end\n                        end\n                    end\n                    return AFuelSpy, AFuelWrn\n                end\n                atmo_fuel_percent()\n            end\n\n        --SPACE FUEL WARNING\n            SFuelSpy = [[<span style=\" color:#141fad\">S Fuel</span>]]\n            SFuelWrn = [[]]\n\n            if spacefueltank_size > 0 then\n                function space_fuel_percent()\n                    local fuelpercent = 0\n                    SFuelWrn = [[]]\n                    SFuelSpy = [[<span style=\" color:#141fad\">S Fuel</span>]]\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                fuelpercent = json.decode(slot_id[1].getWidgetData()).percentage\n                                if fuelpercent < 20 and fuelpercent > 0 then\n                                    SFuelSpy = [[<span style=\" color:orange\">S Fuel</span>]] \n                                    SFuelWrn = SFuelWrn ..[[<span style=\" color: orange\">S Fuel Tank ]]..slot_id[2].number..[[ LO LVL</span><br>]]\n                                elseif fuelpercent == 0 then\n                                    SFuelSpy = [[<span style=\" color:red\">S Fuel</span>]]\n                                    SFuelWrn = SFuelWrn.. [[<span style=\" color: red\">S Fuel Tank ]]..slot_id[2].number..[[ EMPTY</span><br>]]\n                                end\n                            end\n                        end\n                    end\n                    return SFuelSpy, SFuelWrn\n                end\n                space_fuel_percent()\n            end\n\n        --ROCKET FUEL WARNING\n            RFuelSpy = [[<span style=\" color:#141fad\">R Fuel</span>]]\n            RFuelWrn = [[]]\n            RktAct = [[#141fad]]\n\n            if rocketfueltank_size > 0 then\n                function rocket_fuel_percent()\n                    local fuelpercent = 0\n                    RFuelWrn = [[]]\n                    RFuelSpy = [[<span style=\" color:#141fad\">R Fuel</span>]]\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            if json.decode(slot_id[1].getWidgetData()).percentage then\n                                fuelpercent = json.decode(slot_id[1].getWidgetData()).percentage\n                                if fuelpercent < 20 and fuelpercent > 0 then\n                                    RFuelSpy = [[<span style=\" color:orange\">R Fuel</span>]] \n                                    RFuelWrn = RFuelWrn ..[[<span style=\" color: orange\">R Fuel Tank ]]..slot_id[2].number..[[ LO LVL</span><br>]]\n                                elseif fuelpercent == 0 then\n                                    RFuelSpy = [[<span style=\" color:red\">R Fuel</span>]]\n                                    RFuelWrn = RFuelWrn.. [[<span style=\" color: red\">R Fuel Tank ]]..slot_id[2].number..[[ EMPTY</span><br>]]\n                                end\n                            end\n                        end\n                    end\n                    return RFuelSpy, RFuelWrn\n                end\n                rocket_fuel_percent()\n\n                function r_warning_light()\n                    for i = 1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            RktAct = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if RktAct == \"n/a\" then\n                                RktAct = [[#141fad]]\n                            else\n                                RktAct = [[red]]\n                            end\n                        end\n                    end\n                    return RktAct\n                end\n                r_warning_light()\n            end\n\n        --ATMO FUEL MIN TIME\n            a_t_h = 0\n            a_t_m = 0\n            a_t_s = 0\n\n            if atmofueltank_size > 0 then\n                function a_fuel_minimum_time()\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            a_minutes_min = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if a_minutes_min ~= \"n/a\" then\n                                a_minutes_min = a_minutes_min\n                                break\n                            else\n                                a_minutes_min = 0\n                            end\n                        end\n                    end\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"AtmoFuelContainer\" then\n                            local timeleft = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if timeleft ~= \"n/a\" and timeleft > 0 then\n                                if timeleft < a_minutes_min then\n                                    a_minutes_min = timeleft\n                                end\n                            end\n                        end\n                    end\n                    a_t_h = a_minutes_min/3600\n                    a_t_m = (a_t_h-(math.floor(a_t_h)))*60\n                    a_t_s = (a_t_m-(math.floor(a_t_m)))*60\n                    return a_t_h, a_t_m, a_t_s\n                end\n                a_fuel_minimum_time()\n            end\n\n        --SPACE FUEL MIN TIME\n            s_t_h = 0\n            s_t_m = 0\n            s_t_s = 0\n\n            if spacefueltank_size > 0 then\n                function s_fuel_minimum_time()\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            s_minutes_min = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if s_minutes_min ~= \"n/a\" then\n                                s_minutes_min = s_minutes_min\n                                break\n                            else\n                                s_minutes_min = 0\n                            end\n                        end\n                    end\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"SpaceFuelContainer\" then\n                            local timeleft = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if timeleft ~= \"n/a\" and timeleft > 0 then\n                                if timeleft < s_minutes_min then\n                                    s_minutes_min = timeleft\n                                end\n                            end\n                        end\n                    end\n                    s_t_h = s_minutes_min/3600\n                    s_t_m = (s_t_h-(math.floor(s_t_h)))*60\n                    s_t_s = (s_t_m-(math.floor(s_t_m)))*60\n                    return s_t_h, s_t_m, s_t_s\n                end\n                s_fuel_minimum_time()\n            end\n\n        --ROCKET FUEL MIN TIME\n            r_t_h = 0\n            r_t_m = 0\n            r_t_s = 0\n\n            if rocketfueltank_size > 0 then\n                function r_fuel_minimum_time()\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            r_minutes_min = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if r_minutes_min ~= \"n/a\" then\n                                r_minutes_min = r_minutes_min\n                                break\n                            else\n                                r_minutes_min = 0\n                            end\n                        end\n                    end\n                    for i=1, #slot do\n                        local slot_id = slot[i]\n                        local class = slot_id[2].class\n                        if class == \"RocketFuelContainer\" then\n                            local timeleft = json.decode(slot_id[1].getWidgetData()).timeLeft\n                            if timeleft ~= \"n/a\" and timeleft > 0 then\n                                if timeleft < r_minutes_min then\n                                    r_minutes_min = timeleft\n                                end\n                            end\n                        end\n                    end\n                    r_t_h = r_minutes_min/3600\n                    r_t_m = (r_t_h-(math.floor(r_t_h)))*60\n                    r_t_s = (s_t_m-(math.floor(r_t_m)))*60\n                    return r_t_h, r_t_m, r_t_s\n                end\n                r_fuel_minimum_time()\n            end\n\n        --DATA ASEMBLER\n           if AtmoTank == \"true\" then\n            local atmo_data = {\n                [\"t_a_fuel_mass\"]=t_a_fuel_mass,\n                [\"a_fuel_percent_avg_hud\"]=a_fuel_percent_avg_hud,\n                [\"AFuelSpy\"]=AFuelSpy,\n                [\"AFuelWrn\"]=AFuelWrn,\n                [\"a_t_h\"]=math.floor(a_t_h),\n                [\"a_t_m\"]=math.floor(a_t_m),\n                [\"a_t_s\"]=math.floor(a_t_s)\n            }\n            atmo_data = json.encode(atmo_data)\n            db.setStringValue(\"atmo_data\", atmo_data:gsub(\"\\\"\",\"@@@\"))\n           end\n           if SpaceTank == \"true\" then\n            local space_data = {\n                [\"t_s_fuel_mass\"]=t_s_fuel_mass,\n                [\"s_fuel_percent_avg_hud\"]=s_fuel_percent_avg_hud,\n                [\"SFuelSpy\"]=SFuelSpy,\n                [\"SFuelWrn\"]=SFuelWrn,\n                [\"s_t_h\"]=math.floor(s_t_h),\n                [\"s_t_m\"]=math.floor(s_t_m),\n                [\"s_t_s\"]=math.floor(s_t_s)\n            }\n            space_data = json.encode(space_data)\n            db.setStringValue(\"space_data\", space_data:gsub(\"\\\"\",\"@@@\"))\n           end\n           if RocketTank == \"true\" then\n            local rocket_data = {\n                [\"r_s_fuel_mass\"]=t_r_fuel_mass,\n                [\"r_fuel_percent_avg_hud\"]=r_fuel_percent_avg_hud,\n                [\"RFuelSpy\"]=RFuelSpy,\n                [\"RFuelWrn\"]=RFuelWrn,\n                [\"RktAct\"]=RktAct,\n                [\"r_t_h\"]=math.floor(r_t_h),\n                [\"r_t_m\"]=math.floor(r_t_m),\n                [\"r_t_s\"]=math.floor(r_t_s)\n            }\n            rocket_data = json.encode(rocket_data)\n            db.setStringValue(\"rocket_data\", rocket_data:gsub(\"\\\"\",\"@@@\"))\n           end\n        end\n        fuel_data()\n\n    --SCREEN\n     --EXPORT\n        local FontName=\"Montserrat-Light\"--export\n        FontName=[[\"]].. FontName ..[[\"]]\n        local FontSize=30--export\n\n        local Font_R=217--export\n        Font_R=ColorConvert(Font_R)\n        local Font_G=217--export\n        Font_G=ColorConvert(Font_G)\n        local Font_B=217--export\n        Font_B=ColorConvert(Font_B)\n\n        local Table_R=0--export\n        Table_R=ColorConvert(Table_R)\n        local Table_G=0--export\n        Table_G=ColorConvert(Table_G)\n        local Table_B=255--export\n        Table_B=ColorConvert(Table_B)\n\n        local AFcolor_R=ColorConvert(30)\n        local AFcolor_G=ColorConvert(144)\n        local AFcolor_B=ColorConvert(255)\n\n        local SFcolor_R=ColorConvert(255)\n        local SFcolor_G=ColorConvert(255)\n        local SFcolor_B=ColorConvert(0)\n\n        local RFcolor_R=ColorConvert(106)\n        local RFcolor_G=ColorConvert(90)\n        local RFcolor_B=ColorConvert(205)\n\n     --SCREEN DATA\n        function ScreenData()\n            ScreenSlot.activate()\n        --ScreenTable\n            local ScreenTable={}\n        --Parameters\n            ScreenTable[1]=[[\n            local FontName=]].. FontName ..[[\n            local FontSize=]].. FontSize ..[[\n            local FontColorR, FontColorG, FontColorB=]].. Font_R ..[[, ]].. Font_G ..[[, ]]..Font_B ..[[\n            local TableR, TableG, TableB=]].. Table_R ..[[, ]].. Table_G ..[[, ]].. Table_B ..[[\n            local AFcolor_R, AFcolor_G, AFcolor_B=]].. AFcolor_R ..[[, ]].. AFcolor_G ..[[, ]].. AFcolor_B ..[[\n            local SFcolor_R, SFcolor_G, SFcolor_B=]].. SFcolor_R ..[[, ]].. SFcolor_G ..[[, ]].. SFcolor_B ..[[\n            local RFcolor_R, RFcolor_G, RFcolor_B=]].. RFcolor_R ..[[, ]].. RFcolor_G ..[[, ]].. RFcolor_B ..[[\n            ]]\n\n        --Setup\n            ScreenTable[2]=[[\n            local json=require('dkjson')\n\n         --Layers\n            local L_AF=createLayer()\n            local L_SF=createLayer()\n            local L_RF=createLayer()\n            local L_table=createLayer()\n            local L_text=createLayer()\n\n         --Default\n            setDefaultFillColor(L_text, Shape_Text, FontColorR, FontColorG, FontColorB, 1)\n            setDefaultFillColor(L_AF, Shape_Box, AFcolor_R, AFcolor_G, AFcolor_B, 1)\n            setDefaultFillColor(L_SF, Shape_Box, SFcolor_R, SFcolor_G, SFcolor_B, 1)\n            setDefaultFillColor(L_RF, Shape_Box, RFcolor_R, RFcolor_G, RFcolor_B, 1)\n            setDefaultStrokeColor(L_table, Shape_Box, TableR, TableG, TableB, 1)\n            setDefaultStrokeWidth(L_table, Shape_Box, 1)\n            setDefaultFillColor(L_table, Shape_Box, TableR, TableG, TableB, 0.2)\n\n         --Fonts\n            local FontText=loadFont(FontName , FontSize)\n            ]]\n\n        --Fuel Gauges\n            ScreenTable[3]=[[\n             local TotalFuelTanks=]].. TotalFuelTanks ..[[\n             local FT_List=json.decode(getInput()) or {}\n\n             local ScrW,ScrH=getResolution()\n\n             local x,y,w,h=0,100,100,400\n             local sep=ScrW-(TotalFuelTanks*w)\n             sep=sep/(TotalFuelTanks+1)\n\n             for i=1, #FT_List do\n                x=(sep*i)+((i-1)*w)\n                addBox(L_table, x, y, w, h)\n\n                setNextTextAlign(L_text, AlignH_Center, AlignV_Middle)\n                addText(L_text, FontText, i, (x+w/2), (y-60))\n\n                local Percent=FT_List[i][2]\n                local hp=h/100*Percent\n\n                setNextTextAlign(L_text, AlignH_Center, AlignV_Middle)\n                addText(L_text, FontText, Percent..\" %\", (x+w/2), (y+h+50))\n\n                local class=FT_List[i][1]\n                if class==\"AtmoFuelContainer\" then\n                 setNextTextAlign(L_text, AlignH_Center, AlignV_Middle)\n                 addText(L_text, FontText, \"A Fuel\", (x+w/2), (y-25))\n                 addBox(L_AF, x, y+h, w, -hp)\n                elseif class==\"SpaceFuelContainer\" then\n                 setNextTextAlign(L_text, AlignH_Center, AlignV_Middle)\n                 addText(L_text, FontText, \"S Fuel\", (x+w/2), (y-25))\n                 addBox(L_SF, x, y+h, w, -hp)\n                elseif class==\"RocketFuelContainer\" then\n                 setNextTextAlign(L_text, AlignH_Center, AlignV_Middle)\n                 addText(L_text, FontText, \"R Fuel\", (x+w/2), (y-25))\n                 addBox(L_RF, x, y+h, w, -hp)\n                end\n\n             end\n            ]]\n\n        --Animation\n            ScreenTable[4]=[[requestAnimationFrame(1)]]\n\n        --RENDER\n            function ScreenRender()\n             local UI=table.concat(ScreenTable)\n             ScreenSlot.setRenderScript(UI)\n            end\n            ScreenRender()\n\n        end\n        if ScreenUnit then ScreenData() end\n\n        unit.setTimer(\"update\", 1)\n--","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"--unit.onStop()\n    db.setStringValue(\"Fuel Module\", \"false\")\n    db.setStringValue(\"AtmoFuelContainer\", \"false\")\n    db.setStringValue(\"SpaceFuelContainer\", \"false\")\n    db.setStringValue(\"RocketFuelContainer\", \"false\")\n\n    if ScreenUnit then\n     ScreenSlot.setCenteredText(\"FUEL MODULE\")\n    end\n--","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"},{"code":"fuel_data()","filter":{"args":[{"value":"update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"--library.onStart()\n    function ColorConvert(x)\n        local y=tonumber(x)/255\n        return y\n    end","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"}],"methods":[],"events":[]}