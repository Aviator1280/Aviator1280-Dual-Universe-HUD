name: Aviator1280 Gunner Seat v6.4.0
pvp: true

slots:
 core:
  class: CoreUnit
 weapon:
  class: WeaponUnit
  select: manual
 radar:
  class: RadarPVPUnit
  select: manual
 databank:
  class: databank

handlers:
 library:
  onStart:
   lua: |
    local concat = table.concat
    local sFormat=string.format

    local function internalSerialize(v,tC,t)
     local check = type(v)
     local intSerial=internalSerialize
     if check=='table' then
      t[tC]='{'
      local tempC=tC+1
      if #v==0 then
       for k,e in pairs(v) do
        if type(k)~='number' then
         t[tempC]=k
         t[tempC+1]='='
         tempC=tempC+2
        else
         t[tempC]='['
         t[tempC+1]=k
         t[tempC+2]=']='
         tempC=tempC+3
        end
        tempC=intSerial(e,tempC,t)
        t[tempC]=','
        tempC=tempC+1
       end
      else
       for k,e in pairs(v) do
        tempC=intSerial(e,tempC,t)
        t[tempC]=','
        tempC=tempC+1
       end
      end
      if tempC==(tC+1) then
       t[tempC]='}'
       return tempC+1
      else
       t[tempC-1]='}'
       return tempC
      end
     elseif check=='string' then
      t[tC]=sFormat("%q",v)
      return tC+1
     elseif check=='number' then
      t[tC]=tostring(v)
      return tC+1
     else
      t[tC]=v and 'true' or 'false'
      return tC+1
     end
     return tC
    end

    function serialize(v)
     local t={}
     local tC=1
     local check = type(v)
     local intSerial=internalSerialize
     if check=='table' then
      t[tC]='{'
      tC=tC+1
      local tempC=tC
      if #v==0 then
       for k,e in pairs(v) do
        if type(k)~='number' then
         t[tempC]=k
         t[tempC+1]='='
         tempC=tempC+2
        else
         t[tempC]='['
         t[tempC+1]=k
         t[tempC+2]=']='
         tempC=tempC+3
        end
        tempC=intSerial(e,tempC,t)
        t[tempC]=','
        tempC=tempC+1
       end
      else
       for k,e in pairs(v) do
        tempC=intSerial(e,tempC,t)
        t[tempC]=','
        tempC=tempC+1
       end
      end
      if tempC==tC then
       t[tempC]='}'
      else
       t[tempC-1]='}'
      end
     elseif check=='string' then
      t[tC]=sFormat("%q",v)
     elseif check=='number' then
      t[tC]=tostring(v)
     else
      t[tC]=v and 'true' or 'false'
     end

     return concat(t)
    end

    function deserialize(s)
     local f=load('t='..s)
     f()
     return t
    end

 unit:
  onStart:
   lua: |
    --[[

    Author: Aviator1280

    --]]
    function PVPStation()
    --SETUP
     local SoftwareVersion="v6.4.0"
     system.print("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")
     system.print("Aviator1280 Gunner Seat")
     system.print("Release "..SoftwareVersion)
     system.print("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")

     _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
     _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
     databank.setStringValue("PVPGunner", "ON")

     RDRMaxRange=radar_1.getRange()
     local RDRRagnge=radar_1.getIdentifyRanges()
     local XSRange,SRange,MRange,LRange=RDRRagnge[1],RDRRagnge[2],RDRRagnge[3],RDRRagnge[4]
     local Targets_To_Show=10 --export
     local NbOfTargets=Targets_To_Show
     WeaponList={}
     weaponlinked=false
     local IDList={}

    --FRIEND LIST
     function FleetListFunction()
      FleetList={}
      local DBFleetList={}
      DBFleetList=databank.getStringValue("Fleet")
      DBFleetList=json.decode(DBFleetList)
      if (DBFleetList==nil or DBFleetList=="") then DBFleetList={} end
      for i=1, #DBFleetList do 
       local id=tonumber(DBFleetList[i].id)
       local n=DBFleetList[i].n
       local dist=radar_1.getConstructDistance(id)
       FleetList[i]={n=n,id=id,dist=dist}
      end
     end
     if databank then FleetListFunction() end

    --TARGET LIST
     function TargetListFunction()
      local dataID=radar_1.getConstructIds()
      local radar_data=radar_1.getWidgetData():gmatch('"constructId":"[0-9]*","distance":[%d%.]*')
      DynamicTargetList={}
      TargetTotal=#dataID
      AbandonedList={}
      ThreatList={}
      IDList={}
      NbOfTargets=Targets_To_Show
      local RDRcounter,counterMAX,ABDcounter,THRcounter,Abandoned=0,NbOfTargets,0,0,0

      for v in radar_data do
       if RDRcounter<counterMAX then
        local id,distance=v:match('"constructId":"([0-9]*)","distance":([%d%.]*)')
        local cType=radar_1.getConstructKind(id)
        Abandoned=radar_1.isConstructAbandoned(id)
        if (cType==5 and Abandoned==0) then
         local isFleet=false
         for x=1, #FleetList do
          if tonumber(id)==FleetList[x].id then isFleet=true break end
         end
         if not isFleet then
          RDRcounter=RDRcounter+1
          DynamicTargetList[RDRcounter]={id=tonumber(id),dist=distance}
         end
        end
       end
      end

      for i, v in pairs(dataID) do
       Abandoned=radar_1.isConstructAbandoned(v)
       if (Abandoned==1 and ABDcounter<counterMAX) then
        ABDcounter=ABDcounter+1
        local n=radar_1.getConstructName(v)
        local dist=radar_1.getConstructDistance(v)
        AbandonedList[ABDcounter]={n=n,dist=dist}
        IDList[#IDList+1]=v
       end
      end

      for i, v in pairs(dataID) do
       local Threat=radar_1.getThreatRateFrom(v)
       if (Threat>1 and THRcounter<counterMAX) then
        THRcounter=THRcounter+1
        local n=radar_1.getConstructName(v)
        local dist=radar_1.getConstructDistance(v)
        ThreatList[THRcounter]={n=n,dist=dist}
        IDList[#IDList+1]=v
       end
      end

     end
     if radar_1.getOperationalState()==1 then TargetListFunction() end

    --NB OF TARGETS TO SHOW
     PrevMin=0
     function Target()
      TargetList={}
      if NbOfTargets>#DynamicTargetList then NbOfTargets=#DynamicTargetList end
      for x=1, NbOfTargets do
       local id,idINS,min_distance,name,TLvl,Size,InRange=0,0,0,"","","",false
       for index in pairs(DynamicTargetList) do
        id=DynamicTargetList[index].id
        local distance=radar_1.getConstructDistance(id)
        if min_distance==0 then
         InRange=false
         idINS=id
         min_distance=distance
         name=radar_1.getConstructName(id)
         TLvl=radar_1.getThreatRateFrom(id)
         Size=radar_1.getConstructCoreSize(id)
         if Size=="XS" then if distance<=XSRange then InRange=true end
         elseif Size=="S" then if distance<=SRange then InRange=true end
         elseif Size=="M" then if distance<=MRange then InRange=true end
         elseif Size=="L" then if distance<=LRange then InRange=true end
         end
         if min_distance<PrevMin then min_distance=PrevMin end
        elseif ((distance<min_distance and distance>PrevMin) or (PrevMin==min_distance and distance>PrevMin)) then
         InRange=false
         idINS=id
         min_distance=distance
         name=radar_1.getConstructName(id)
         TLvl=radar_1.getThreatRateFrom(id)
         Size=radar_1.getConstructCoreSize(id)
         if Size=="XS" then if distance<=XSRange then InRange=true end
         elseif Size=="S" then if distance<=SRange then InRange=true end
         elseif Size=="M" then if distance<=MRange then InRange=true end
         elseif Size=="L" then if distance<=LRange then InRange=true end
         end
        end    
       end
       IDList[#IDList+1]=idINS
       TargetList[x]={n=name,dist=tonumber(min_distance),TLvl=TLvl,InRange=InRange}
       if x==NbOfTargets then PrevMin=0 else PrevMin=min_distance end
      end
     end
     if radar_1.getOperationalState()==1 then Target() end

    --TARGET INFO
     function TargetInfoFunction()
      TargetInfo={}
      local IDList=radar_1.getIdentifiedConstructIds()
      if IDList==nil then IDList={} end
      for i=1, #IDList do
       local id=IDList[i]
       local name=radar_1.getConstructName(id)
       local target=radar_1.getTargetId()
       local lock=false
       local speed=0
       local Aspeed=0
       if target==id then
        speed=radar_1.getConstructSpeed(id)
        Aspeed=radar_1.getConstructRadialSpeed(id)
        lock=true
       end
       local TLel=radar_1.getThreatRateFrom(id)
       local size=radar_1.getConstructCoreSize(id)
       local dist=radar_1.getConstructDistance(id)
       local weapons=radar_1.getConstructInfos(id).weapons
       if (weapons*0)~=0 then weapons=1.0 end
       local radars=radar_1.getConstructInfos(id).radars
       local spaceEngines=radar_1.getConstructInfos(id).spaceEngines
       TargetInfo[i]={n=name,lock=lock,TLvl=TLvl,size=size,dist=dist,weapons=weapons,radars=radars,spaceEngines=spaceEngines,speed=speed,Aspeed=Aspeed}
      end
     end

    --WEAPONS DATA
     if (weapon_size~=nil and weapon_size>0) then
      weaponlinked=true
      function wepdat()
       WeaponList={}
       for i=1, weapon_size do
        local data=weapon[i].getWidgetData()
        data=json.decode(data)
        local name=data.name
        local fireBlocked=data.properties.fireBlocked
        local fireReady=data.properties.fireReady
        local hitProb=data.properties.hitProbability
        local optDist=data.staticProperties.optimalDistance
        local optCone=data.staticProperties.optimalAimingCone
        WeaponList[i]={name=name,fireBlocked=fireBlocked,fireReady=fireReady,hitProb=hitProb,optDist=optDist,optCone=optCone}
       end
      end
     end

    --SENDING DATA
     function SendingData()
      local UpdateData={
       RDRMaxRange=RDRMaxRange,
       TargetList=TargetList,
       TargetTotal=TargetTotal,
       FleetList=FleetList,
       TargetInfo=TargetInfo,
       ThreatList=ThreatList,
       AbandonedList=AbandonedList,
       WeaponList=WeaponList
       }
      UpdateData=serialize(UpdateData)
      databank.setStringValue("PVPStationData", UpdateData)
     end

    --UPDATE
     unit.setTimer("PVPupdate", 1)
     unit.setTimer("PVPsender", 1/10)
    end
    PVPStation()
  onTimer:
   args: [PVPupdate]
   lua: |
    if radar_1.getOperationalState()==1 then
     FleetListFunction()
     TargetListFunction()
     Target()
     if weaponlinked then wepdat() end
    else
     system.destroyWidgetPanel(radarPanel)
     _autoconf.hideCategoryPanels()
     unit.setTimer("CheckRadarOp", 1)
     unit.stopTimer("PVPupdate")
     unit.stopTimer("PVPsender")
     RDRMaxRange,TargetList,TargetTotal,TargetInfo,ThreatList,AbandonedList=0,{},0,{},{},{} 
     SendingData()
    end
  onTimer:
   args: [PVPsender]
   lua: |
    local isIdentified=radar_1.getIdentifiedConstructIds()
    if #isIdentified>0 then TargetInfoFunction() else TargetInfo={} end
    if (databank and radar_1.getOperationalState()==1) then SendingData() end
  onTimer:
   args: [CheckRadarOp]
   lua: |
    if radar_1.getOperationalState()==1 then
     unit.stopTimer("CheckRadarOp")
     PVPStation()
    end
  onStop:
   lua: |
    if databank then
     databank.setStringValue("PVPGunner", "OFF")
     databank.setStringValue("PVPStationData", "")
    end