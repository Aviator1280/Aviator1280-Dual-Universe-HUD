{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"databank","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--unit.start()\n --SETUP\n  function Setup()\n   ScrW=system.getScreenWidth()\n   ScrH=system.getScreenHeight()\n   MenuW=ScrW/10\n   MenuY=ScrH/30\n   MenuTopPos=10 --export\n   MenuLeftPos=30 --export\n   MenuGap=10 --export\n   FontSize=10 --export\n   Magnifier=2 --export\n   Opacity=0.5 --export\n   PVP_ON=false --export\n   TargetList={}\n   TargetInfo={}\n   FleetList={}\n   ThreatList={}\n   AbandonedList={}\n   PVPGunnerIsOn=false\n   RDRMaxRange=0\n   TargetTotal=0\n   databank.setStringValue(\"PVPStation\", \"ON\")\n   local SoftwareVersion=\"v4.0.0\"\n   databank.setStringValue(\"PVP Station ver\", SoftwareVersion)\n   unit.setTimer(\"update\", 1/10)\n  end\n  Setup()\n\n --PARAMETERS\n  local FontColor=databank.getStringValue(\"FontColor\")\n   FontColor=json.decode(FontColor)\n   Font_R=FontColor[1]\n   Font_G=FontColor[2]\n   Font_B=FontColor[3]\n  local ButtonColor=databank.getStringValue(\"Background\")\n   ButtonColor=json.decode(ButtonColor)\n   Button_R=ButtonColor[1]\n   Button_G=ButtonColor[2]\n   Button_B=ButtonColor[3]\n  local TableColor=databank.getStringValue(\"TableColor\")\n   TableColor=json.decode(TableColor)\n   Table_R=TableColor[1]\n   Table_G=TableColor[2]\n   Table_B=TableColor[3]\n  local FontTitle=databank.getStringValue(\"FontTitle\")\n   FontTitle=json.decode(FontTitle)\n   Title_R=FontTitle[1]\n   Title_G=FontTitle[2]\n   Title_B=FontTitle[3]\n  local ButtonPressed=databank.getStringValue(\"Selection\")\n   ButtonPressed=json.decode(ButtonPressed)\n   Button_Pressed_R=ButtonPressed[1]\n   Button_Pressed_G=ButtonPressed[2]\n   Button_Pressed_B=ButtonPressed[3]\n  Alpha1=databank.getFloatValue(\"Alpha1\")\n\n --CSS\n  function css_html()\n   HUD_HTML={}\n   HUD_HTML[#HUD_HTML+1]=[[\n   <style>\n    td {border:1px solid rgb(]].. Table_R ..[[,]].. Table_G ..[[,]].. Table_B ..[[);\n    color:rgb(]].. Font_R ..[[,]].. Font_G ..[[,]].. Font_B ..[[);\n    font-family:Arial;\n    font-size:]].. FontSize ..[[px;\n    text-align:center;\n    vertical-align:middle;}\n    .RedTable {border:1.5px solid rgb(255,0,0)}\n    .bkgnd {background:rgba(]].. Button_R ..[[,]].. Button_G ..[[,]].. Button_B ..[[,]].. Alpha1 ..[[)}\n    .center {text-align:center}\n    .left {text-align:left}\n    .right {text-align:right}\n    .Fright {float:right}\n    .Fleft {float:left}\n    .Text {color:rgb(]].. Font_R ..[[,]].. Font_G ..[[,]].. Font_B ..[[) !important}\n    .Title {color:rgb(]].. Title_R ..[[,]].. Title_G ..[[,]].. Title_B ..[[) !important}\n    .Units {color:rgb(0,255,255) !important}\n    .select {background-color:rgb(]].. Button_Pressed_R ..[[,]].. Button_Pressed_G ..[[,]].. Button_Pressed_B ..[[)}\n    .green {color:rgb(0,255,0) !important}\n    .red {color:rgb(255,0,0) !important}\n    .amber {color:rgb(252,177,3) !important}\n    .gray {color:rgb(130,130,130) !important}\n    .Aspeed {stroke:rgb(]].. Table_R ..[[,]].. Table_G ..[[,]].. Table_B ..[[);stroke-width:2px;fill:rgb(]].. Table_R ..[[,]].. Table_G ..[[,]].. Table_B ..[[);fill-opacity:0.3}\n    .AspeedInner {fill:rgb(]].. Table_R ..[[,]].. Table_G ..[[,]].. Table_B ..[[)}\n    .AspeedFixedLine {stroke:rgb(]].. Title_R ..[[,]].. Title_G ..[[,]].. Title_B ..[[);stroke-width:1px}\n    .AspeedLine {stroke:rgb(255,0,0);stroke-width:1px}\n    .AspeedText {fill:rgb(]].. Title_R ..[[,]].. Title_G ..[[,]].. Title_B ..[[)}\n    .MySpeed {stroke:rgb(]].. Title_R ..[[,]].. Title_G ..[[,]].. Title_B ..[[);stroke-width:1px}\n    .TSpeed {stroke:rgb(255,0,0);stroke-width:1px}\n    .Speed {stroke:rgb(]].. Table_R ..[[,]].. Table_G ..[[,]].. Table_B ..[[);stroke-width:2px;fill:rgb(]].. Table_R ..[[,]].. Table_G ..[[,]].. Table_B ..[[);fill-opacity:0.3}\n    .MySpeedText {fill:rgb(]].. Title_R ..[[,]].. Title_G ..[[,]].. Title_B ..[[)}\n    .TSpeedText {fill:rgb(255,0,0)}\n   </style>]]\n   return HUD_HTML\n  end\n\n --SCREEN GENERATOR (← &#8592;)(↑ &#8593;)(→ &#8594;)(↓ &#8595;)\n  --PVPHTML\n   function PVPHTML()\n   --Fleet List\n    local counter=0\n    if #FleetList==nil then counter=0 else counter=#FleetList end\n    local Top=MenuTopPos\n    local Left=(MenuLeftPos+MenuW+MenuGap)\n    HUD_HTML[#HUD_HTML+1]=[[\n     <div style=\"position:absolute;top:]].. Top ..[[px;left:]].. Left ..[[px;\">\n     <table class=\"bkgnd\" width=\"]].. MenuW ..[[px\">\n     <tr height=\"]].. MenuY ..[[px\"><td class=\"Title\" width=\"]].. MenuW ..[[px\">FLEET: ]].. counter ..[[</td></tr>]]\n    for i=1, counter do\n     local Distance=\"No Data\"\n     if FleetList[i].dist~=nil then Distance=FleetList[i].dist else Distance=\"No Data\" end\n     if tonumber(Distance)~=nil then\n      if Distance>200000 then Distance=math.floor(Distance/200000*1000)/1000 ..\" Su\"\n      else Distance=math.floor(Distance/1000*100)/100 ..\" Km\" end\n     end\n     HUD_HTML[#HUD_HTML+1]=[[<tr height=\"]].. MenuY ..[[px\"><td class=\"left green\" width=\"]].. MenuW ..[[px\">]].. FleetList[i].n ..[[<span class=\"Text Fright\">]].. Distance ..[[</span></td></tr>]]\n    end\n    HUD_HTML[#HUD_HTML+1]=[[</table></div>]]\n\n   --Target List\n    if PVPGunnerIsOn then\n     local counter=0\n     if #TargetList==nil then counter=0 else counter=#TargetList end\n     HUD_HTML[#HUD_HTML+1]=[[\n      <div style=\"position:absolute;top:]].. MenuTopPos ..[[px;left:]].. MenuLeftPos ..[[px;\">\n      <table class=\"bkgnd\" width=\"]].. MenuW ..[[px\">\n      <tr height=\"]].. MenuY ..[[px\"><td class=\"Title\" width=\"]].. MenuW ..[[px\">RDR Max Range: ]].. math.floor(RDRMaxRange) ..[[ m</td></tr>\n      <tr height=\"]].. MenuY ..[[px\"><td class=\"Title\" width=\"]].. MenuW ..[[px\">TARGETS: ]].. counter ..[[ of ]].. TargetTotal ..[[</td></tr>]]\n     for i=1, counter do\n      local Distance=\"No Data\"\n      if TargetList[i].dist~=nil then Distance=TargetList[i].dist else Distance=\"No Data\" end\n      if tonumber(Distance)~=nil then\n       if Distance>200000 then Distance=math.floor(Distance/200000*1000)/1000 ..\" Su\"\n       else Distance=math.floor(Distance/1000*100)/100 ..\" Km\" end\n      end\n      local TLvlColor=\"\"\n      local TLvl=TargetList[i].TLvl\n      local name=TargetList[i].n\n      if TLvl==\"identified\" then TLvlColor=\"amber\"\n      elseif TLvl==\"attacked\" then TLvlColor=\"amber\" end\n      local InRange=TargetList[i].InRange\n      local InRangeColor=\"Text\"\n      if not InRange then InRangeColor=\"red\" end\n      if name~=\"\" then HUD_HTML[#HUD_HTML+1]=[[\n       <tr height=\"]].. MenuY ..[[px\"><td class=\"left ]].. TLvlColor ..[[\" width=\"]].. MenuW ..[[px\">]].. name ..[[<span class=\"]].. InRangeColor ..[[ Fright\">]].. Distance ..[[</span></td></tr>]]\n      end\n     end\n     HUD_HTML[#HUD_HTML+1]=[[</table></div>]]\n    end\n\n   --Target Info\n    if (PVPGunnerIsOn and #TargetInfo>0) then\n     local locked=false\n     local lockedcolor=\"\"\n     local lockedTargetID=0\n     local Top=MenuTopPos\n     local Left=(MenuLeftPos+MenuW+MenuGap+MenuW+MenuGap)\n     HUD_HTML[#HUD_HTML+1]=[[\n      <div style=\"position:absolute;top:]].. Top ..[[px;left:]].. Left ..[[px;\">\n      <table class=\"bkgnd\">\n      <tr height=\"]].. MenuY ..[[px\"><td colspan=\"2\" class=\"Title\" width=\"]].. (MenuW*1.75) ..[[px\">Identified</td></tr>]]\n     for i=1, #TargetInfo do\n      if TargetInfo[i].dist~=nil then Distance=TargetInfo[i].dist else Distance=\"No Data\" end\n      if tonumber(Distance)~=nil then\n       if Distance>200000 then Distance=math.floor(Distance/200000*1000)/1000 ..\" Su\"\n       else Distance=math.floor(Distance/1000*100)/100 ..\" Km\" end\n      end\n      local TLvlColor=\"\"\n      local TLvl=TargetInfo[i].TLvl\n      if (TLvl~=nil and TLvl~=\"none\" and TLvl~=\"attacked\") then TLvlColor=\"amber\"\n      elseif TLvl==\"attacked\" then TLvlColor=\"red\" end\n      local size=TargetInfo[i].size\n      locked=TargetInfo[i].lock\n      if locked then\n       lockedTargetID=i\n       lockedcolor=\"RedTable\"\n      else lockedcolor=\"\" end\n      local name=TargetInfo[i].n\n      local function status(x)\n       local color=\"gray\"\n       if x~=nil then\n        if x>0.75 then color=\"green\"\n        elseif x>0.0 then color=\"amber\"\n        else color=\"red\" end\n       else x=\"gray\" end\n       return color\n      end\n      local wcolor,rcolor,ecolor=\"gray\",\"gray\",\"gray\"\n      local weapons=TargetInfo[i].weapons\n      local radars=TargetInfo[i].radars\n      local spaceEngines=TargetInfo[i].spaceEngines\n      wcolor=status(weapons)\n      rcolor=status(radars)\n      ecolor=status(spaceEngines)\n      HUD_HTML[#HUD_HTML+1]=[[\n       <tr height=\"]].. MenuY ..[[px\"><td class=\"]].. lockedcolor ..[[ ]].. TLvlColor ..[[\" width=\"]].. MenuW ..[[px\">(]].. size ..[[) ]].. name ..[[&nbsp<span class=\"Fright\">]].. Distance ..[[</span></td>\n       <td class=\"]].. lockedcolor ..[[ Title\"><span class=\"]].. wcolor ..[[\"> W E P </span>|<span class=\"]].. rcolor ..[[\"> R D R </span>|<span class=\"]].. ecolor ..[[\"> Sp E N G </span></td></tr>]]\n     end\n     HUD_HTML[#HUD_HTML+1]=[[</table></div>]]\n\n     for i=1, #TargetInfo do\n      if TargetInfo[i].lock then\n       local PosTop=MenuTopPos\n       local PosLeft=((ScrW/2)+120)\n       local Width=(MenuW*2+MenuGap)\n       databank.setFloatValue(\"ToPeriscopTop\", PosTop)\n       databank.setFloatValue(\"ToPeriscopLeft\", PosLeft)\n       databank.setFloatValue(\"ToPeriscopWidth\", Width)\n\n       local AspeedTopPos=(ScrH/1.52)\n       local AspeedLeftPos=(ScrW/1.73)\n       local cc=(MenuW/4)+2\n       local radius=MenuW/4\n       local SpeedTopPos=(ScrH/1.3)\n       local SpeedLeftPos=(ScrW/1.75)\n       local Width=(MenuW/1.5)+4\n       local Sheight=MenuW\n       local x1=Width/3  \n       local x2=(Width/3)+(Width/3)\n       local Aspeed=math.floor(TargetInfo[lockedTargetID].Aspeed*3.6)\n       local RAspeed=(Aspeed/30000*360)\n       local MySpeed=math.floor((vec3(core.getVelocity()):len())*3.6)\n       local TSpeed=math.floor(TargetInfo[lockedTargetID].speed*3.6)\n       local MySpeedY=math.floor(Sheight-(Sheight/30000*MySpeed))\n       local TSpeedY=math.floor(Sheight-(Sheight/30000*TSpeed))\n       local distance=math.floor(TargetInfo[lockedTargetID].dist/1000)\n       HUD_HTML[#HUD_HTML+1]=[[\n        <div style=\"position:absolute;top:]].. AspeedTopPos ..[[px;left:]].. AspeedLeftPos ..[[px;\">\n        <svg width=\"]].. Width ..[[px\" height=\"]].. (MenuW/1.5)+4 ..[[px\">\n        <circle class=\"Aspeed\" cx=\"]].. cc ..[[px\" cy=\"]].. cc ..[[px\" r=\"]].. radius ..[[px\"/>\n        <circle class=\"AspeedInner\" cx=\"]].. cc ..[[px\" cy=\"]].. cc ..[[px\" r=\"2px\"/>\n        <line class=\"AspeedFixedLine\" x1=\"]].. cc ..[[px\" y1=\"]].. cc ..[[px\" x2=\"]].. cc ..[[px\" y2=\"0px\"/>\n        <line class=\"AspeedLine\" x1=\"]].. cc ..[[px\" y1=\"]].. cc ..[[px\" x2=\"]].. cc ..[[px\" y2=\"0px\" transform=\"rotate(]].. RAspeed ..[[ ]].. cc ..[[,]].. cc ..[[)\"/>\n        <text class=\"AspeedText\" x=\"]].. cc ..[[px\" y=\"]].. (MenuW/2) ..[[px\" font-size=\"13\" text-anchor=\"middle\">]].. Aspeed ..[[<tspan x=\"]].. cc ..[[px\" y=\"]].. (MenuW/2)+20 ..[[px\">]].. distance ..[[</tspan></text>\n        </svg>\n        </div>\n\n        <div style=\"position:absolute;top:]].. SpeedTopPos ..[[px;left:]].. SpeedLeftPos ..[[px;\">\n        <svg width=\"]].. Width ..[[px\" height=\"]].. Sheight ..[[px\">\n        <rect class=\"Speed\" x=\"]].. x1 ..[[\" y=\"0\" width=\"]].. Width/3 ..[[\" height=\"]].. Sheight ..[[\"/>\n        <line class=\"MySpeed\" x1=\"]].. x1 ..[[\" y1=\"]].. MySpeedY ..[[\" x2=\"]].. x2 ..[[\" y2=\"]].. MySpeedY ..[[\"/>\n        <line class=\"TSpeed\" x1=\"]].. x1 ..[[\" y1=\"]].. TSpeedY ..[[\" x2=\"]].. x2 ..[[\" y2=\"]].. TSpeedY ..[[\"/>\n        <text class=\"MySpeedText\" x=\"]].. x2 ..[[\" y=\"]].. MySpeedY ..[[\" font-size=\"13\" text-anchor=\"start\">]].. MySpeed ..[[</text>\n        <text class=\"TSpeedText\" x=\"]].. x1 ..[[\" y=\"]].. TSpeedY ..[[\" font-size=\"13\" text-anchor=\"end\">]].. TSpeed ..[[</text>\n        </svg>\n        </div>]]\n      end\n     end\n    end\n\n   --Weapons\n    if (PVPGunnerIsOn and #WeaponList>0) then\n     local WeapTopPos=ScrH/1.3\n     local WeapLeftPos=ScrW/2.85\n     HUD_HTML[#HUD_HTML+1]=[[\n      <div style=\"position:absolute;top:]].. WeapTopPos ..[[px;left:]].. WeapLeftPos ..[[px;\">\n      <table class=\"bkgnd\">]]\n     for i=1, #WeaponList do\n      local name=WeaponList[i].name\n      local optDist=WeaponList[i].optDist\n      local optCone=WeaponList[i].optCone\n      local hitProb=WeaponList[i].hitProb\n      local fireBlocked=WeaponList[i].fireBlocked\n      local fireReady=WeaponList[i].fireReady\n      local readycolor=\"\"\n      if (fireBlocked and fireReady) then readycolor=\"green\" else readycolor=\"red\" end\n      HUD_HTML[#HUD_HTML+1]=[[\n       <tr height=\"]].. MenuY/2 ..[[px\">\n       <td class=\"Title\">]].. name ..[[</td>\n       <td>Opt Dist ]].. math.floor(optDist/1000) ..[[</td>\n       <td>Opt Cone ]].. math.floor(optCone) ..[[</td>\n       <td>Hit Prob ]].. math.floor(hitProb*100) ..[[</td>\n       <td class=\"]].. readycolor ..[[\">READY</td>\n       </tr>]]\n     end\n     HUD_HTML[#HUD_HTML+1]=[[</table></div>]]\n    end\n\n   --Threat List\n    if (PVPGunnerIsOn and #ThreatList>0) then\n     local counter=#ThreatList\n     local ThreatListVPos=#TargetList+2\n     local Top=(MenuTopPos+(MenuY*ThreatListVPos)+MenuGap)\n     local Left=MenuLeftPos\n     HUD_HTML[#HUD_HTML+1]=[[\n      <div style=\"position:absolute;top:]].. Top ..[[px;left:]].. Left ..[[px;\">\n      <table class=\"bkgnd\" width=\"]].. MenuW ..[[px\">\n      <tr height=\"]].. MenuY ..[[px\"><td class=\"Title red\" width=\"]].. MenuW ..[[px\">THREATS: ]].. counter ..[[</td></tr>]]\n     for i=1, counter do\n      local Distance=\"No Data\"\n      if ThreatList[i].dist~=nil then Distance=ThreatList[i].dist else Distance=\"No Data\" end\n      if tonumber(Distance)~=nil then\n       if Distance>200000 then Distance=math.floor(Distance/200000*1000)/1000 ..\" Su\"\n       else Distance=math.floor(Distance/1000*100)/100 ..\" Km\" end\n      end\n      local name=ThreatList[i].n\n      HUD_HTML[#HUD_HTML+1]=[[<tr height=\"]].. MenuY ..[[px\"><td class=\"left\" width=\"]].. MenuW ..[[px\">]].. name ..[[<span class=\"Text Fright\">]].. Distance ..[[</span></td></tr>]]\n     end\n     HUD_HTML[#HUD_HTML+1]=[[</table></div>]]\n    end\n  \n   --Abandoned List\n    if (PVPGunnerIsOn and #AbandonedList>0) then\n     local counter=#AbandonedList\n     local corr=2\n     if #ThreatList>0 then corr=3 end\n     local AbandonedVPos=#TargetList+#ThreatList+corr\n     local Top=(MenuTopPos+(MenuY*AbandonedVPos)+MenuGap+MenuGap)\n     local Left=MenuLeftPos\n     HUD_HTML[#HUD_HTML+1]=[[\n      <div style=\"position:absolute;top:]].. Top ..[[px;left:]].. Left ..[[px;\">\n      <table class=\"bkgnd\" width=\"]].. MenuW ..[[px\">\n      <tr height=\"]].. MenuY ..[[px\"><td class=\"Title\" width=\"]].. MenuW ..[[px\">ABANDONED: ]].. counter ..[[</td></tr>]]\n     for i=1, counter do\n      local Distance=\"No Data\"\n      if AbandonedList[i].dist~=nil then Distance=AbandonedList[i].dist else Distance=\"No Data\" end\n      if tonumber(Distance)~=nil then\n       if Distance>200000 then Distance=math.floor(Distance/200000*1000)/1000 ..\" Su\"\n       else Distance=math.floor(Distance/1000*100)/100 ..\" Km\" end\n      end\n      local name=AbandonedList[i].n\n      HUD_HTML[#HUD_HTML+1]=[[<tr height=\"]].. MenuY ..[[px\"><td class=\"left\" width=\"]].. MenuW ..[[px\">]].. name ..[[<span class=\"Text Fright\">]].. Distance ..[[</span></td></tr>]]\n     end\n     HUD_HTML[#HUD_HTML+1]=[[</table></div>]]\n    end\n\n   --Core Stress\n    local CoreStress=core.getCoreStress()\n    local CSTopPos=(MenuY*3)\n    local CSLeftPos=(ScrW/2)-(MenuW/2)\n    local CSMax=MenuW-6\n    local BarW=(CoreStress*CSMax)\n    HUD_HTML[#HUD_HTML+1]=[[\n     <div style=\"position:absolute;top:]].. CSTopPos ..[[px;left:]].. CSLeftPos ..[[px;\">\n     <table class=\"bkgnd\" width=\"]].. MenuW ..[[px\">\n     <tr height=\"]].. MenuY ..[[px\"><td class=\"Title\" width=\"]].. MenuW ..[[px\">Core Combat Stress: <span class=\"Fright\">]].. math.floor(CoreStress*100) ..[[ %</span></td></tr>\n     <tr><td width=\"]].. MenuW ..[[px\"><span class=\"Fleft\"><svg width=\"]].. BarW ..[[px\" height=\"]].. MenuY-4 ..[[\"><rect x=\"0\" y=\"2\" width=\"100%\" height=\"100%\" style=\"fill:red\"/></svg></span></td></tr>\n     </table></div>]]\n\n   --Table Concat\n    local HTML=table.concat(HUD_HTML)\n    return HTML\n   end\n\n --SCREEN SCRIPT BUILDIER\n  function PVPScreen()\n   local ScreenHTML=css_html()\n   ScreenHTML=PVPHTML()\n  \n   if (PVPCockpit==\"OFF\" and PVPGunner==\"OFF\") then PVP_ON=false else PVP_ON=true end\n   if PVP_ON then system.setScreen(ScreenHTML) system.showScreen(1) else\n    system.showScreen(0)\n    PVPGunnerIsOn=false\n    TargetList={}\n    TargetInfo={}\n    AbandonedList={}\n    ThreatList={}\n    TargetTotal=0\n   end\n  end\n--","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"--unit.tick(\"update\")\n if databank then\n  PVPGunner=databank.getStringValue(\"PVPGunner\")\n  PVPCockpit=databank.getStringValue(\"PVPCockpit\")\n  local PVPStationData=databank.getStringValue(\"PVPStationData\")\n  if PVPGunner==\"\" then PVPGunner=\"OFF\" end\n  if PVPCockpit==\"\" then PVPCockpit=\"OFF\" end\n  if PVPStationData==nil then PVPStationData=\"\" end\n\n  if ((PVPGunner==\"ON\" or PVPCockpit==\"ON\") and PVPStationData~=\"\") then\n   PVPGunnerIsOn=true\n   local data=databank.getStringValue(\"PVPStationData\")\n   data=deserialize(data)\n   RDRMaxRange=data.RDRMaxRange\n   if RDRMaxRange==nil then RDRMaxRange=0 end\n   TargetList=data.TargetList\n   if TargetList==nil then TargetList={} end\n   TargetTotal=data.TargetTotal\n   if TargetTotal==nil then TargetTotal=0 end\n   FleetList=data.FleetList\n   if FleetList==nil then FleetList={} end\n   TargetInfo=data.TargetInfo\n   if TargetInfo==nil then TargetInfo={} end\n   ThreatList=data.ThreatList\n   if ThreatList==nil then ThreatList={} end\n   AbandonedList=data.AbandonedList\n   if AbandonedList== nil then AbandonedList={} end\n   WeaponList=data.WeaponList\n   if WeaponList==nil then WeaponList={} end\n  elseif (PVPGunner==\"OFF\" or PVPCockpit==\"OFF\") then\n   PVPGunnerIsOn=false\n   TargetList={}\n   TargetInfo={}\n   AbandonedList={}\n   WeaponList={}\n   ThreatList={}\n   TargetTotal=0\n   local Fleet=databank.getStringValue(\"Fleet\")\n   if Fleet~=\"\" then\n    Fleet=json.decode(Fleet)\n    FleetList=Fleet\n    if FleetList==nil then FleetList={} end\n   end\n  end\n  PVPScreen()\n end","filter":{"args":[{"value":"update"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"--unit.stop()\n databank.setStringValue(\"PVPStation\", \"OFF\")\n databank.setStringValue(\"PVPStationData\", \"\")","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"2"},{"code":"--library:\n local concat = table.concat\n local sFormat=string.format\n\n local function internalSerialize(v,tC,t)\n  local check = type(v)\n  local intSerial=internalSerialize\n  if check=='table' then\n   t[tC]='{'\n   local tempC=tC+1\n   if #v==0 then\n    for k,e in pairs(v) do\n     if type(k)~='number' then\n      t[tempC]=k\n      t[tempC+1]='='\n      tempC=tempC+2\n     else\n      t[tempC]='['\n      t[tempC+1]=k\n      t[tempC+2]=']='\n      tempC=tempC+3\n     end\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   else\n    for k,e in pairs(v) do\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   end\n   if tempC==(tC+1) then\n    t[tempC]='}'\n    return tempC+1\n   else\n    t[tempC-1]='}'\n    return tempC\n   end\n  elseif check=='string' then\n   t[tC]=sFormat(\"%q\",v)\n   return tC+1\n  elseif check=='number' then\n   t[tC]=tostring(v)\n   return tC+1\n  else\n   t[tC]=v and 'true' or 'false'\n   return tC+1\n  end\n  return tC\n end\n\n function serialize(v)\n  local t={}\n  local tC=1\n  local check = type(v)\n  local intSerial=internalSerialize\n  if check=='table' then\n   t[tC]='{'\n   tC=tC+1\n   local tempC=tC\n   if #v==0 then\n    for k,e in pairs(v) do\n     if type(k)~='number' then\n      t[tempC]=k\n      t[tempC+1]='='\n      tempC=tempC+2\n     else\n      t[tempC]='['\n      t[tempC+1]=k\n      t[tempC+2]=']='\n      tempC=tempC+3\n     end\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   else\n    for k,e in pairs(v) do\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   end\n   if tempC==tC then\n    t[tempC]='}'\n   else\n    t[tempC-1]='}'\n   end\n  elseif check=='string' then\n   t[tC]=sFormat(\"%q\",v)\n  elseif check=='number' then\n   t[tC]=tostring(v)\n  else\n   t[tC]=v and 'true' or 'false'\n  end\n\n  return concat(t)\n end\n\n function deserialize(s)\n  local f=load('t='..s)\n  f()\n  return t\n end\n\n local Code = [[return function()\n local concat = table.concat\n local sFormat=string.format\n\n local function internalSerialize(v,tC,t)\n  local check = type(v)\n  local intSerial=internalSerialize\n  if check=='table' then\n   t[tC]='{'\n   local tempC=tC+1\n   if #v==0 then\n    for k,e in pairs(v) do\n     if type(k)~='number' then\n      t[tempC]=k\n      t[tempC+1]='='\n      tempC=tempC+2\n     else\n      t[tempC]='['\n      t[tempC+1]=k\n      t[tempC+2]=']='\n      tempC=tempC+3\n     end\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   else\n    for k,e in pairs(v) do\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   end\n   if tempC==(tC+1) then\n    t[tempC]='}'\n    return tempC+1\n   else\n    t[tempC-1]='}'\n    return tempC\n   end\n  elseif check=='string' then\n   t[tC]=sFormat(\"%q\",v)\n   return tC+1\n  elseif check=='number' then\n   t[tC]=tostring(v)\n   return tC+1\n  else\n   t[tC]=v and 'true' or 'false'\n   return tC+1\n  end\n  return tC\n end\n\n function serialize(v)\n  local t={}\n  local tC=1\n  local check = type(v)\n  local intSerial=internalSerialize\n  if check=='table' then\n   t[tC]='{'\n   tC=tC+1\n   local tempC=tC\n   if #v==0 then\n    for k,e in pairs(v) do\n     if type(k)~='number' then\n      t[tempC]=k\n      t[tempC+1]='='\n      tempC=tempC+2\n     else\n      t[tempC]='['\n      t[tempC+1]=k\n      t[tempC+2]=']='\n      tempC=tempC+3\n     end\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   else\n    for k,e in pairs(v) do\n     tempC=intSerial(e,tempC,t)\n     t[tempC]=','\n     tempC=tempC+1\n    end\n   end\n   if tempC==tC then\n    t[tempC]='}'\n   else\n    t[tempC-1]='}'\n   end\n  elseif check=='string' then\n   t[tC]=sFormat(\"%q\",v)\n  elseif check=='number' then\n   t[tC]=tostring(v)\n  else\n   t[tC]=v and 'true' or 'false'\n  end\n\n  return concat(t)\n end\n\n function deserialize(s)\n  local f=load('t='..s)\n  f()\n  return t\n end\n end]]\n\n databank.setStringValue(\"Serialize\", Code)","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"}],"methods":[],"events":[]}